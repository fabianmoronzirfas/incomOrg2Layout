// allIncomProjects.jsx// this script places all incom projects onto a large page//// based on InsertMultipleImages.js by Brian Reyman// http://www.adobe.com/cfusion/exchange/index.cfm?event=extensionDetail&extid=1046817// and theImageGrid.jsx by fabiantheblind// https://raw.github.com/fabiantheblind/theGrids/master/imageGrid/theImageGrid.jsx// Copyright (C) 2011 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses/#include "db.json"//~ our project for this script is stunning white noise id 1173//~ id: 189 title: DUKOMENTATION IAIV Fabian Mor&Ucirc;n Zirfas//~ id: 700 title: [Corporate Motion] SPECTRE//~ id: 1173 title: Stunning White Noise//~ id: 1179 title: DisasterManagement//~ id: 1297 title: UEA2//~ id: 1488 title: Incom(API) 2 &hellip;//~ id: 1791 title: Praktikumsemester Forseesense//~ id: 1792 title: Kopf Hand Fuss F. Mor&oacute;n Zirfas//~ id: 1793 title: noise mashine//~ id: 1751 title: Garfikdesign &quot;T.I.L.Y. &amp;&amp; Anti.Soc.Icon.&quot;//~ id: 1752 title: Advertising Design Help//~ id: 1753 title: CutUP.14 Corporate Deathmatch//~ id: 1754 title: Produktdesign/Digitale Medien FFF//~ id: 1755 title: Lug und Trug Recycling//~ id: 1756 title: Kultur-, Kunst- und Designgeschichte Feng Mengbo//~ id: 1757 title: Blue Ocean Gero//~ id: 1758 title: Produktion von Printmedien FMZ//~ id: 1759 title: Design Versprechen Konfetti//~ id: 1798 title: InDesign Scripting Tutorial//~ id: 1799 title: Americas Army Serious Games//~ id: 1800 title: Grundkurs C / C++//~ id: 1362 title: UE_Laermvar meta = new Object();    meta.db = data;// this comes from the included db.json    meta.prjList = [1173, 1362, 1754]; // the projects to highlite    meta.DEBUG = false; // this is for debugging        // this is for quicker editing     // in the final render switch in the overlay and the image place    meta.placeImages = false;       meta.addImageOverlay  = false;    meta.pw = 3000; // this will hold the page width    meta.ph = 841; // this will hold the page width    meta.flsFolder = null;// the folder for the images//~     meta.allImages = null;// the images    meta.imgW = 25; // the image sizes    meta.imgH = 25;   //~     meta.step = 1; // the step for selecting the images        // these are the margins    meta.left = 23;    meta.right = 23;    meta.top = 50;    meta.bottom = 50;        meta.cCount = 75;        // this will be filled with data from the db.json    // sorted by startdate    meta.sortedFiles = null;      meta.Masterframe = null;    sortDBbyStartTime();    removeFirstElement();// removes old junk    if(meta.DEBUG) alertProjectList();    buildImgListFromDB();// calculate the gutter depending on how many images per column    meta.gutter = (((meta.pw - meta.left) -meta.right) - meta.cCount*meta.imgW) / meta.cCount -1;  // the distance between the images      main();// everything happens in here// you need a function to cancel a scriptfunction main(){var d = app.documents.add(); //build a basic document    makeColors(d);    makeStyles(d); // build some paragrph styles    makeDoc (d);// build the document   loadFiles();// opens a prompt and lets the user choose a foldervar p = d.pages.item(0);// finally - get the first page    p.appliedMaster = d.masterSpreads.item(0);// apply the masterspread   //~     var i = 0; // for counting images//~     var count = 0; // for counting image frames    if(meta.DEBUG==true)$.writeln (meta.sortedFiles.length);// this is just debug      var rects  = new Array();// an array for the retangles  var overlay = new Array();    var t = meta.top;    var b = meta.bottom;   var l = meta.left;   var r = meta.right;         var x = meta.left;   var y = meta.top;   var x2 = x + meta.imgW;   var y2 = y + meta.imgH;      var lastBnds  = placeImages(d,p,x,y,rects); //~    var lastBnds = [meta.top , meta.left ,meta.ph-meta.bottom,meta.pw- meta.right];      // now lts make some text   // jihhhaaaaaavar tf =   p.textFrames.add({geometricBounds:[lastBnds[2]+ meta.gutter,meta.left ,meta.ph- meta.bottom, meta.pw - meta.right]});    tf.textFramePreferences.textColumnGutter = 5;    tf.textFramePreferences.textColumnCount  =23;//~     meta.masterFrame = tf;    placeText(tf);    takeOutTheTrash(d); // This removes html formatting    grepReformatting(d); // this removes some things and adds new paragraphs for the important projects//~     findParagraphs(d,tf); // now look for the first paragraph with the id}// close main functionfunction findParagraphs(doc,tf){      var fTPref  = app.findTextPreferences;	var cTPref = app.changeTextPreferences;    // use json objects to keep it tidy    // fw is the find what    // to is the change to    var prj_ = new Array();    for(var i = 0; i < meta.db.projects.length; i++){            prj_.push({   "fw":"id: "+meta.db.projects[i].id+" ||","id":meta.db.projects[i].id});        }			emptyFC();    // now loop thru the object to get all the greps	for(var j = 0;j < prj_.length;j++){		fTPref.findWhat = prj_[j].fw;        var res = doc.findText();//~         alert(res[0]);        try{res[0].parent.characters.everyItem().fillColor = doc.swatches.item(""+prj_[j].id);}catch(e){            alert(res[0] + "\n"+ e);            }//~         alert(text.parent.characters.item(text.paragraphs[0].index).paragraphs[0]);		emptyFC();        }    //~     for(var i = 0; i < tf.paragraphs.length;i++){//~         var p = tf.paragraphs[i];//~         var id = p.contents.substring(3,8);//~         alert(id);//~         if(id.match (1173)){//~             alert(id + "\nfound white noise id");//~             }//~         }        }function insertWithNewLine(txt){                var lf = "<LF>";// we add this to the highlite projects to add a new line    return lf + txt;    }function addAndFormat(tf,content,car,i,j,type){                                var tempTF = tf.parent.textFrames.add({geometricBounds:[                    meta.ph - 100, meta.left, meta.ph, meta.left+100]});                            // from here on it is some kind of "manual" selection              //what to edit and highlite in the text                            if(meta.db.projects[i].id == 1173){              //              // this is project White Noise              //                                         var txt = content;                 var res = "";                 if(meta.db.projects[i].posts[j].id == 17135 && type.match("post text")){                  res =     tweakNoiseText(txt);                                    tempTF.contents =  insertWithNewLine(res);              tempTF.paragraphs.everyItem().applyCharacterStyle(              app.activeDocument.characterStyles.item("whitenoise 1173")              );                          }else{                                    res = txt;              tempTF.contents =   insertWithNewLine(res);              try{              tempTF.paragraphs.everyItem().applyCharacterStyle(              app.activeDocument.characterStyles.item(car + " 1173")              );              }catch(e){                    alert(car + "\n" + e );                                    }                }              tempTF.paragraphs.everyItem().fillTint = 100;                }else if(meta.db.projects[i].id ==  1362){              //              // this is project UE LAERM              //                               tempTF.contents =   insertWithNewLine(content);              tempTF.paragraphs.everyItem().applyCharacterStyle(              app.activeDocument.characterStyles.item(car + " 1362")              );              tempTF.paragraphs.everyItem().fillTint = 100;                }else if(meta.db.projects[i].id ==   1754){                                     //              // this is project vFFF              //                                                tempTF.contents = insertWithNewLine(content);                            tempTF.paragraphs.everyItem().applyCharacterStyle(              app.activeDocument.characterStyles.item(car + " 1754")              );                         tempTF.paragraphs.everyItem().fillTint = 100;                         }else{                                           //              // this is all the other projects              //                             tempTF.contents = content;                            tempTF.paragraphs.everyItem().applyCharacterStyle(              app.activeDocument.characterStyles.item(car)              );                                           }                        tempTF.previousTextFrame = tf;              tempTF.remove();//~               tf.parentStory.insertionPoints.item(-1).contents = content;//~                 tf.paragraphs.lastItem().appliedParagraphStyle = parStyle;            }function tweakNoiseText(txt){    var noiseTXT = new Array();    var noiseVals = new Array();        noiseTXT = txt.split(",");    for(var n = 0; n < noiseTXT.length;n++){        var t = parseFloat(noiseTXT[n]);        noiseVals[n] = t.toFixed(10);        }        noiseVals.shift();                var str = "";        for(s = 0; s < noiseVals.length;s++){            if(noiseVals[s] >= 0 ){                str = str + "+" + noiseVals[s] + " \t ";                }else{                str = str  + noiseVals[s] + " \t ";                                        }            }                       return str;}function placeText(tf){                    for(var i = 0; i < meta.db.projects.length; i++){                            var dt1 = iso_to_datim(meta.db.projects[i].datetimeStart);                var dt2 = iso_to_datim(meta.db.projects[i].datetimeEnd);                                var dt = dt1.getFullYear() + " "+dt1.getMonth()                 +" - "                +dt2.getFullYear() + " "+dt2.getMonth() ;                                if((meta.db.projects[i].id == meta.prjList[0])||                (meta.db.projects[i].id == meta.prjList[1])||                (meta.db.projects[i].id == meta.prjList[2])){                addAndFormat(tf,"id: "+ meta.db.projects[i].id,"id ",i,0, "id");                                        }else{               addAndFormat(tf,"id: "+ meta.db.projects[i].id,"id " + meta.db.projects[i].id,i,0, "id");                                        }              addAndFormat(tf,"timespan: " + dt,"h2",i,0, "id");              addAndFormat(tf,meta.db.projects[i].title,"h1",i,0,"title");                                try{addAndFormat(tf,meta.db.projects[i].workspace.title,"h1",i,0,"title");}catch(e){}                                addAndFormat(tf,meta.db.projects[i].text,"body",i,0,"text");                for(var j = 0; j < meta.db.projects[i].posts.length;j++){                                                                    addAndFormat(tf,meta.db.projects[i].posts[j].titel,"h2",i,j,"post title");                           addAndFormat(tf,meta.db.projects[i].posts[j].text + "\n","body",i,j,"post text");                                                                                                             }            }            }function placeImages(d,p,x,y,rects){          for(var s = 0; s < meta.sortedFiles.length;s++){        // some debugging//~        if(meta.DEBUG){//~             if(meta.sortedFiles[s].id == 1754){alert("image from project 1754");//~             }//~        }             var x2 = x + meta.imgW;// calc the lower right corner x          var y2 = y + meta.imgH; // calc the lower right corner y                rects.push(                    p.ovals.add({                        geometricBounds: [y,x,y2,x2]                                    })                      );                                  try{                rects[s].label = meta.sortedFiles[s].filename;// add a scriptlabel                // now place the file                // if the file throws an error load the error.jpg                // the checkfiletype() also sorts out files that cant be placed                if(meta.placeImages == true){                                rects[s].place(                meta.flsFolder.fsName + "/" +                             checkFileType(                            meta.sortedFiles[s].filename                            )                );                }                // end try                }catch(e){                   if(meta.DEBUG) alert( meta.sortedFiles[s].filename + "\n" + e);                 // so got an error place the error imgage instead                 rects[s].place(                meta.flsFolder.fsName + "/" +"error.jpg"                );                rects[s].label = meta.sortedFiles[s].filename;                    }// close catch                //~             rects[s].fit(FitOptions.PROPORTIONALLY); // fit it to the frame            rects[s].fit(FitOptions.CENTER_CONTENT);// center it                        try{               if(meta.DEBUG) $.writeln(rects[s].images.item(0).effectivePpi);                                   // if the images are to small to print                    if(rects[s].images.item(0).effectivePpi[0] < 280){                        rects[s].images.item(0).horizontalScale = 24;                                    rects[s].images.item(0).verticalScale = 24;                          rects[s].images.item(0).fit(FitOptions.CENTER_CONTENT);// center it again                }                               }catch(e){                            }                                                   if(meta.sortedFiles[s].id == meta.prjList[0]){                rects[s].applyObjectStyle(d.objectStyles.item("images "+meta.prjList[0]));                image_transfrom(rects[s],meta.sortedFiles[s].id,meta.sortedFiles[s].id);               }else if(meta.sortedFiles[s].id == meta.prjList[1]){                rects[s].applyObjectStyle(d.objectStyles.item("images "+meta.prjList[1]));                image_transfrom(rects[s],meta.sortedFiles[s].id,meta.sortedFiles[s].id);                                }else if(meta.sortedFiles[s].id == meta.prjList[2]){                rects[s].applyObjectStyle(d.objectStyles.item("images "+meta.prjList[2]));                image_transfrom(rects[s],meta.sortedFiles[s].id,meta.sortedFiles[s].id);                              }else{                   image_ID (rects[s], "image ul", meta.sortedFiles[s].id+"");                if(meta.addImageOverlay == true){                   // overlay the images with a white image               var overlay = p.rectangles.add({               geometricBounds:rects[s].geometricBounds               });                      overlay.applyObjectStyle(d.objectStyles.item("overlay"));           overlay.bringToFront();           overlay.fillColor = d.swatches.item(2);           rects[s].applyObjectStyle(d.objectStyles.item("imagesBlend"));           rects[s].fit(FitOptions.CONTENT_TO_FRAME);           }          } // close else (all the other projects)              	rects[s].textWrapPreferences.properties = {            textWrapMode: TextWrapModes.BOUNDING_BOX_TEXT_WRAP//~             textWrapOffset:[5,5,5,5]            };                   x = x + meta.imgW + meta.gutter;        if(x >= meta.pw - meta.imgW - meta.right*2){       x = meta.left;       y = y + meta.gutter + meta.imgH;       }  lastBnds = rects[s].geometricBounds;   } // close the images loopreturn lastBnds;    }function buildImgListFromDB(){        var allFiles = new Array();    var prevDate = 0;    for(var x = 0; x < meta.db.projects.length;x++){    var pr = meta.db.projects[x];    var d = iso_to_datim (pr.datetimeStart);    var year = d.getFullYear();          if(year != prevDate){//~                 alert("New Year" + year);        allFiles.push({"filename":year+".jpg","date":pr.datetimeStart,"id":"none"});                              }    prevDate = year;        allFiles.push({"filename":pr.image.filename,"date":pr.datetimeStart,"id":pr.id});        for(var y = 0; y < pr.files.length; y++){           if(meta.DEBUG) $.writeln (y + " " + pr.files[y].type);            if(pr.files[y].type.match("file")){                    allFiles.push({"filename":pr.files[y].filename,"date":pr.datetimeStart,"id":pr.id});                    }            }                        var posts = meta.db.projects[x].posts;       for(var i = 0; i < posts.length;i++){            var m = posts[i].media;            for(var j = 0; j < m.length; j++){                if(m[j].type.match("file")){                    allFiles.push({"filename":m[j].filename,"date":pr.datetimeStart,"id":pr.id});                    }                }// close j loop            }// close i loop        }    meta.sortedFiles = allFiles;    }function checkFileType(fn){    // the regexp patterns to sort out files    // that cant be placed like images in indesign    // use JSON to keep it tidy          var flsList = new Array();     flsList.push({"pattern":"\\.pdf","file":"pdf.jpg"});     flsList.push({"pattern":"\\.mov","file":"mov.jpg"});     flsList.push({"pattern":"\\.zip","file":"zip.jpg"});     flsList.push({"pattern":"\\.rtf","file":"rtf.jpg"});     flsList.push({"pattern":"\\.dmg","file":"dmg.jpg"});             for(var b = 0; b < flsList.length;b++){            var reg = new RegExp(flsList[b].pattern);            if(fn.match(reg)){                fn = flsList[b].file;                }                   }                    return fn;    } function image_transfrom(rect, txt, id){          var factor = 1.5;                      var vrScaleTM = app.transformationMatrices.add({verticalScaleFactor:factor});// scale vertical with the factor 0.7 makes it smaller	var hrScaleTM = app.transformationMatrices.add({horizontalScaleFactor:factor});// scale horizontal with the factor 0.7 makes it smaller		rect.transform(CoordinateSpaces.pasteboardCoordinates, AnchorPoint.centerAnchor, vrScaleTM); 		rect.transform(CoordinateSpaces.pasteboardCoordinates, AnchorPoint.centerAnchor, hrScaleTM);        rect.fit(FitOptions.FILL_PROPORTIONALLY);        rect.fit(FitOptions.CENTER_CONTENT);            image_ID(rect, "image ul " + id, txt);                       }    function image_ID(rect , car , txt ){            var bnds = rect.geometricBounds;        var id = rect.parent.textFrames.add({geometricBounds:[bnds[0],bnds[1],bnds[2]             + meta.gutter,bnds[3]],contents:txt});        id.characters.everyItem().appliedCharacterStyle = car;     }     /**     * this sorts by starttime     */ function sortDBbyStartTime(){      meta.db.projects.sort(custom_sort);           }   /**    * this is a fix for an old project    */function removeFirstElement(){    meta.db.projects.shift();    }function alertProjectList(){    var txt = "";for(var i = 0; i < meta.db.projects.length; i++){    var p = meta.db.projects[i];    txt = txt + "id: "+p.id+ " title: "+p.title + " time: "+ p.datetimeStart+"\n";//~     if(p.id == 1362 ){//~     prjcts.push(p); //sel + p.toSource () + "\n";//~     }//~     if( p.id == 1173 ){//~     p2 = p; //sel = sel + p.toSource () + "\n";//~     }//~     if( p.id == 1754){//~     p3 = p; //sel = sel + p.toSource () + "\n";//~     }     }           //~ alert(dt);alert(txt);        }// this function sorts by time// found here// http://stackoverflow.com/questions/3859239/sort-json-by-datefunction custom_sort(a, b) {    return new Date(iso_to_datim(a.datetimeStart)).getTime() - new Date(iso_to_datim(b.datetimeStart)).getTime();}// found here// http://www.topsoft.at/pstrainer/pstrainer.phpfunction iso_to_datim(iso) {    var d=null;    var len=iso.length;        if(len>=19) {        var hh = parseInt(iso.substr(11,2),10);        var mi = parseInt(iso.substr(14,2),10);        var ss = parseInt(iso.substr(17,2),10);        }else {            var hh=0;            var mi=0;            var ss=0;            }        if(len>=10) {        var yy = parseInt(iso.substr(0,4),10);        var mo = parseInt(iso.substr(5,2),10)-1;        var dd = parseInt(iso.substr(8,2),10);        d = new Date(yy,mo,dd,hh,mi,ss);        }else{            d=new Date();            }    return d;}function loadFiles(){        // define the folder and the filetype	var theFolder = Folder.selectDialog ("Choose the FOLDER to import \".tif\" images from");     // if the user cancels the folder dialog     // cancel the script    if(!theFolder){        return;// this cancels the whole function main \(\)        }	var theFileType = "*.*";// only use tif files could also be jpg    // get all images into an array    var temp = null;    try{    temp = theFolder.getFiles(theFileType);              }catch(e){           alert("Error with this\n" +e);           }// end catch      var allImages = temp;    if((allImages == "")||(allImages == null) ){        if(meta.DEBUG)alert("There aare no images");        return;              }    meta.flsFolder = theFolder;// to get them all everywhere    meta.allImages = allImages;    }function makeStyles(doc){var objSt1  = doc.objectStyles.add();objSt1.properties = {        name:"imagesBlend",        strokeWeight: 1,        strokeColor:doc.swatches.item(3),        strokeTint: 23,        transparencySettings:{                blendingSettings:{                    opacity:23                    }                }        };var objSt3  = doc.objectStyles.add();objSt3.properties = {        name:"overlay",        strokeWeight: 0,          transparencySettings:{                blendingSettings:{                    blendMode: BlendMode.COLOR                    }                }        };        var oStyles = [            {"name":"images","id":"0"},            {"name":"images","id":meta.prjList[0]+""},            {"name":"images","id":meta.prjList[1]+""},            {"name":"images","id":meta.prjList[2]+""}            ];                    for(var o = 0; o < oStyles.length;o++){        var objSt  = doc.objectStyles.add();        objSt.properties = {            name:oStyles[o].name + " " + oStyles[o].id,            strokeWeight: 1,            fillColor:doc.swatches.item(2),            strokeColor:doc.swatches.item(oStyles[o].id+""),            strokeTint: 50        };    }    var cStyles = {    "styles":[             {"name":"h1" ,"font":"DejaVu Serif	Book","factor":2.3},            {"name":"h2" ,"font":"DejaVu Serif	Book","factor":1.4},            {"name":"id" ,"font":"DejaVu Serif	Book","factor":1.4},            {"name":"body" ,"font":"DejaVu Serif	Book","factor":1},            {"name":"whitenoise" ,"font":"DejaVu Sans Mono	Book","factor":0.8},            {"name":"image ul" ,"font":"DejaVu Serif	Book","factor":0.8} ],    "vals":[ {"id":"" ,"fll":50},             {"id":" 1173" ,"fll":100},            {"id":" 1362" ,"fll":100},             {"id":" 1754" ,"fll":100} ],    "base":10 };var vals = new Array();for(var v = 0; v < meta.db.projects.length;v++){        var fll = 50;    if(meta.db.projects[v].id == 1173){        }else if(meta.db.projects[v].id == 1362){        fll = 100;        }else if(meta.db.projects[v].id == 1754){          fll = 100;              }else{       fll = 50;       }          vals.push({"id":meta.db.projects[v].id,"fll":fll});        }// now make a double loop // for creating the chracter styles for(var s = 0; s < cStyles.styles.length;s++){     for(var v = 0; v < cStyles.vals.length;v++){        var charStyle = doc.characterStyles.add({                name:cStyles.styles[s].name + cStyles.vals[v].id                });            var base = 0;            if(cStyles.styles[s].name.match("image ul")&& cStyles.vals[v].fll ==50){            base = 9;                           }else{            base = cStyles.base;                                }            charStyle.properties = {                appliedFont : cStyles.styles[s].font,                pointSize: cStyles.base * cStyles.styles[s].factor,                fillTint: cStyles.vals[v].fll                };        }// close v loop }// close s loop                            var idStyles = new Array();    for(var p = 0; p < meta.db.projects.length; p++){       try{ var cst = doc.characterStyles.add({name:"id " +meta.db.projects[p].id});        cst.basedOn = doc.characterStyles.item("h2");        cst.fillColor = doc.swatches.item(meta.db.projects[p].id+"");        }catch(e){}                }    }function makeDoc(doc){            // set some parametersdoc.viewPreferences.properties = {    horizontalMeasurementUnits: MeasurementUnits.MILLIMETERS,    verticalMeasurementUnits:MeasurementUnits.MILLIMETERS    };    	doc.documentPreferences.properties = {		pageWidth : meta.pw,		pageHeight : meta.ph,        facingPages:false	};var msp1 = doc.masterSpreads.item(0).pages.item(0);// edit the masterspreads	msp1.marginPreferences.properties = {        right:meta.right,        top:meta.top,        left:meta.left,        bottom:meta.bottom,        columnGutter:meta.gutter,        columnCount:meta.cCount    };  var msp2 = doc.masterSpreads.item(0).pages.item(1);//edit the other masterspred	msp2.marginPreferences.properties = {      right:meta.right,        top:meta.top,        left:meta.left,        bottom:meta.bottom,        columnGutter:meta.gutter,        columnCount:meta.cCount    };      }// end make doc//~ THIS IS STYLING//~ THIS IS STYLING//~ THIS IS STYLING//~ THIS IS STYLING/** * this function takes out html trash  * */function takeOutTheTrash(doc){	var findGrepPref  = app.findGrepPreferences;	var chngGrepPref = app.changeGrepPreferences;	var findTextPref  = app.findTextPreferences;	var chngTextPref = app.changeTextPreferences;	setFCopt();	emptyFC();		// this is housekeeping	var strings = new Array();	strings[0] = "</span>";	strings[1] = "<span>";	strings[2] = "<ol>";	strings[3] = "</ol>";	strings[4] = "<li>";	strings[5] = "</li>";	strings[6] = "\t";	strings[7] = "<cite>";	strings[8] = "</cite>";	strings[9] = "</ul>";	strings[10] = "<ul>";	strings[11] = "<..>";	strings[12] = "<...>";	strings[13] = "<.>";	strings[14] = "</p>";	strings[15] = "<p>";	strings[16] = "<p >";	strings[17] = "</p >";	strings[18] = "style=“color: #000000;“";	strings[19]  = "style=“text-decoration: underline;“";	strings[20]  = "style=“text-decoration: underline;“";	strings[21]  = "style=“text-align: left;“";	strings[22]  = "style=“text-align: right;“";	strings[23]  = "style=“text-align: center;“";	strings[24]  = "</span >";	strings[25]  = "<span >";	strings[26]  = "style=“color: #";	strings[27]  = "span ";	strings[28]  = ";“";        strings.push("<br />");    strings.push("<h1>");    strings.push("<h2>");    strings.push("<h3>");	    strings.push("</h3>");    strings.push("</h1>");    strings.push("</h2>");    strings.push("<hr />");    strings.push("</em>");    strings.push("<em>");        strings.push("<strong>");        strings.push("</strong>");	for(var i = 0;i < strings.length;i++){		setFCopt();		findTextPref.findWhat = strings[i];		chngTextPref.changeTo = "";		doc.changeText();		emptyFC();	}	emptyFC();        // replace some html encoded characters        var replaceS = new Array();    replaceS.push({"fw":";amp","to":"&"});    replaceS.push({"fw":"amp;","to":"&"});//~ 	    var replaceT = new Array();//~     replaceT.push("&");//~     replaceT.push("&");    	for(var j = 0;j < replaceS.length;j++){		setFCopt();		findTextPref.findWhat = replaceS[j].fw;		chngTextPref.changeTo = replaceS[j].to;		doc.changeText();		emptyFC();	}		}function grepReformatting(doc){        var fGPref  = app.findGrepPreferences;	var cGPref = app.changeGrepPreferences;    var greps_ = new Array();    // use json objects to keep it tidy    // fw is the find what    // to is the change to    greps_.push({   "fw":"  +"      ,        "to":" "});	greps_.push({   "fw":"\r "      ,        "to":"\r"});	greps_.push({   "fw":" \r"      ,        "to":"\r"});	greps_.push({   "fw":"\t\t+"    ,      "to":"\t"});	greps_.push({   "fw":"\r\t"     ,       "to":"\r"});	greps_.push({   "fw":"\t\r"     ,       "to":"\r"});    greps_.push({   "fw":"\r\r+"    ,      "to":" ~7 "});    greps_.push({   "fw":"\r"       ,         "to":" ~7 "});	greps_.push({   "fw":"\n"       ,         "to":" ~7 "});	greps_.push({   "fw":"~b"       ,         "to":" ~7 "});	greps_.push({   "fw":"~7 ~7"    ,      "to":" ~7 "});    greps_.push({   "fw":" ~7  ~7 " ,   "to":" ~7 "});    greps_.push({   "fw":"<LF>"     ,       "to":"\n"});		emptyFC();    // now loop thru the object to get all the greps	for(var j = 0;j < greps_.length;j++){		fGPref.findWhat = greps_[j].fw;		cGPref.changeTo = greps_[j].to;		doc.changeGrep();		emptyFC();	}	emptyFC();    }function setFCopt(){		emptyFC();    //Set the find options.    app.findChangeGrepOptions.includeFootnotes = true;    app.findChangeGrepOptions.includeHiddenLayers = false;    app.findChangeGrepOptions.includeLockedLayersForFind = false;    app.findChangeGrepOptions.includeLockedStoriesForFind = true;    app.findChangeGrepOptions.includeMasterPages = true;	}function emptyFC(){	//Clear the find/change grep preferences.	app.findGrepPreferences = NothingEnum.nothing;    app.changeGrepPreferences = NothingEnum.nothing;	    //Clear the find/change text preferences.	app.findTextPreferences = NothingEnum.nothing;	app.changeTextPreferences = NothingEnum.nothing;}function findHTMLTags(doc) {	setFCopt();//~ 	var findGrepPref  = app.findGrepPreferences;//~ 	var chngGrepPref = app.changeGrepPreferences;//~ 		var findTXTPref  = app.findTextPreferences;	var chngTXTPref = app.changeTextPreferences;		emptyFC();		var easyTagToPS = new Array();	easyTagToPS[0] = "h1";	easyTagToPS[1] = "h2";//~ 	easyTagToPS[2] = "h3";//~ 	easyTagToPS[3] = "h4";//~ 	easyTagToPS[4] = "h5";//~ 	easyTagToPS[5] = "h6";	for(var i = 0; i < easyTagToPS.length; i++){			findGrepPref.findWhat = "<"+ easyTagToPS[i] + ">(.*?)</" + easyTagToPS[i] + ">";				var res = doc.findText();        res.appliedParagraphStyle = easyTagToPS[i];        		chngGrepPref.changeTo = "$1\r";//~         chngGrepPref.appliedParagraphStyle = easyTagToPS[i];//~ 		chngGrepPref.appliedCharacterStyle = doc.characterStyles.item(0);		doc.changeGrep();		emptyFC();	}}    // by dave saunders	function convertToCMYK(color) {		color.space = ColorSpace.cmyk;		var vals = color.colorValue;		for (var j = vals.length - 1; j >= 0; j--) {			vals[j] = Math.round(vals[j]);		}		color.colorValue = vals;	}function makeColors(d){            var cols = [    {"name":0,"col":[0,0,0]},    {"name":meta.prjList[0],"col":[153,51,255]},    {"name":meta.prjList[1],"col":[102,153,255]},    {"name":meta.prjList[2],"col":[51,204,204]},    ];    for(var i = 0; i < meta.prjList.length; i++){                	var theColor = myColorAdd(d,""+ cols[i].name, ColorModel.PROCESS, cols[i].col);            convertToCMYK(theColor);        }            for(var j = 0; j < meta.db.projects.length; j ++){        try{            var c = Math.random()* 75;            var m = Math.random()* 75;            var y = Math.random()* 75;            var k = Math.random()* 10;          myColorAdd(d,""+ meta.db.projects[j].id, ColorModel.PROCESS, [c,m,y,k]);            }catch(e){                 if(meta.DEBUG){                     alert(                     meta.db.projects[j].id + " already exists\n"                      + "its ok i know about it\n" + e);                }            }        }        }// found on http://bit.ly/h5EobK indisnip.wordpress.com ->// how to apply:// add CMYK color//myColorAdd(app.activeDocument, "My Custom Color", ColorModel.PROCESS, [80,50,30,10]);// add RGB color//myColorAdd(app.activeDocument, "My Custom Color", ColorModel.PROCESS, [33,66,99]);// add HEX color//myColorAdd(app.activeDocument, "My Custom Color", ColorModel.PROCESS, "ABCDEF");// add color directly// add CMYK color to document// and asign it to selected object//app.selection[0].fillColor = myColorAdd(app.activeDocument, "My Custom Color", ColorModel.PROCESS, [80,50,30,10]);function myColorAdd(myDocument, myColorName, myColorModel, myColorValue){    if(myColorValue instanceof Array == false){        myColorValue = [(parseInt(myColorValue, 16) >> 16 ) & 0xff, (parseInt(myColorValue, 16) >> 8 ) & 0xff, parseInt(myColorValue, 16 ) & 0xff ];        myColorSpace = ColorSpace.RGB;    }else{        if(myColorValue.length == 3)          myColorSpace = ColorSpace.RGB;        else          myColorSpace = ColorSpace.CMYK;    }    try{        myColor = myDocument.colors.item(myColorName);        myName = myColor.name;    }    catch (myError){        myColor = myDocument.colors.add();        myColor.properties = {name:myColorName, model:myColorModel, space:myColorSpace ,colorValue:myColorValue};    }    return myColor;}