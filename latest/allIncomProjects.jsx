// allIncomProjects.jsx// this script places all incom projects onto a large page//// not based on but this helped on the first steps // InsertMultipleImages.js by Brian Reyman// http://www.adobe.com/cfusion/exchange/index.cfm?event=extensionDetail&extid=1046817// and theImageGrid.jsx by fabiantheblind// https://raw.github.com/fabiantheblind/theGrids/master/imageGrid/theImageGrid.jsx// Copyright (C) 2011 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses///~ our project for this script is stunning white noise id 1173//~ id: 189 title: DUKOMENTATION IAIV Fabian Mor&Ucirc;n Zirfas//~ id: 700 title: [Corporate Motion] SPECTRE//~ id: 1173 title: Stunning White Noise//~ id: 1179 title: DisasterManagement//~ id: 1297 title: UEA2//~ id: 1488 title: Incom(API) 2 &hellip;//~ id: 1791 title: Praktikumsemester Forseesense//~ id: 1792 title: Kopf Hand Fuss F. Mor&oacute;n Zirfas//~ id: 1793 title: noise mashine//~ id: 1751 title: Garfikdesign &quot;T.I.L.Y. &amp;&amp; Anti.Soc.Icon.&quot;//~ id: 1752 title: Advertising Design Help//~ id: 1753 title: CutUP.14 Corporate Deathmatch//~ id: 1754 title: Produktdesign/Digitale Medien FFF//~ id: 1755 title: Lug und Trug Recycling//~ id: 1756 title: Kultur-, Kunst- und Designgeschichte Feng Mengbo//~ id: 1757 title: Blue Ocean Gero//~ id: 1758 title: Produktion von Printmedien FMZ//~ id: 1759 title: Design Versprechen Konfetti//~ id: 1798 title: InDesign Scripting Tutorial//~ id: 1799 title: Americas Army Serious Games//~ id: 1800 title: Grundkurs C / C++//~ id: 1362 title: UE_Laerm#include "db.json"#include "utility.jsx"#include "db_utils.jsx"#include "colors.jsx"#include "document.jsx"#include "styles.jsx"#include "weblinks.jsx"var meta = new Object();	meta.db = data;// this comes from the included db.json	meta.prjList = [1173, 1362, 1754]; // the projects to highlite	meta.highlite = [	{"id":0, "name":"0","col":[255,255,255]},	{"id":1173,"name":"1173","col":[153,51,255]},	{"id":1362,"name":"1362","col":[102,153,255]},	{"id":1754,"name":"1754","col":[51,204,204]}	];		meta.DEBUG = false; // this is for debugging		// this is for quicker editing 	// in the final render switch in the overlay and the image place	meta.placeImages = true;   	meta.addImageOverlay = true;	meta.skipImages = false;    meta.colorsonly = false;	meta.pw = 3000; // this will hold the page width	meta.ph = 841; // this will hold the page width	meta.flsFolder = null;// the folder for the images	meta.imgW = 25; // the image sizes	meta.imgH = 25;   //~	 meta.step = 1; // the step for selecting the images		// these are the margins	meta.left = 42;	meta.right = 42;	meta.top = 50;	meta.bottom = 75;	meta.textColumnCount = 20;	// this will be filled with data from the db.json	// sorted by startdate	meta.sortedFiles = null;   //~	 meta.Masterframe = null;	db_sort_by_starttime();	db_remove_firstelement();// removes old junk	db_build_imageList();	meta.cCount = 80;    // calculate the gutter depending on how many images per column    meta.gutter = ((meta.pw - (meta.left + meta.right)) - (meta.imgW*80)) / 79;	main();// everything happens in here// you need a function to cancel a scriptfunction main(){var d = app.documents.add(); //build a basic document	colors_builder(d);    if(meta.colorsonly)return;	styles_builder(d); // build some paragrph styles//~ return;	    doc_build (d);// build the document    	util_getfilesFolder();// opens a prompt and lets the user choose a folder    // now when you use place() write this    // it will give you the file with the folder you need    /*    				meta.flsFolder.fsName + "/" + util_checkFileType(meta.sortedFiles[iter].filename)                */var p = d.pages.item(0);// finally - get the first page	p.appliedMaster = d.masterSpreads.item(0);// apply the masterspread   	if(meta.DEBUG==true)$.writeln (meta.sortedFiles.length);// this is just debug   var ovals  = new Array();// an array for the ovals//~ var overlay = new Array();var t = meta.top; var b = meta.bottom;var l = meta.left;var r = meta.right;//~    //~ This is the first position of the images.//~ all the other images depend on that positionvar x = meta.left;var y = meta.top;var x2 = x + meta.imgW;var y2 = y + meta.imgH;      //~ last bounds is for the textframe so he //~ will always be positioned depending on the mass of imagesvar lastBnds = null; 	if(meta.skipImages == true){        		lastBnds = [meta.top,meta.left,meta.top + 10, meta.pw - meta.right];        		}else{            	lastBnds  = image_group_build(d,p,x,y,ovals);// build all the images	}	// now lts make some text	// jihhhaaaaaavar tf =   p.textFrames.add({    geometricBounds:[    lastBnds[2]+ meta.gutter*5,    meta.left ,    meta.ph- meta.bottom, meta.pw - meta.right]    });// make the new textfrmae    tf.label = "masterframe";	tf.itemLayer = d.layers.item("content");	tf.textFramePreferences.textColumnGutter = meta.gutter;	tf.textFramePreferences.textColumnCount  = meta.textColumnCount;//~	 meta.masterFrame = tf;	text_place(tf);//~ 	tf.paragraphs.everyItem().appliedParagraphStyle = "body";	text_takeOutTheTrash(d); // This removes html formatting	text_grepReformatting(d); // this removes some things and adds new paragraphs for the important projects//~ 	text_addLegend(tf);    text_FormatParagraphs(d,tf);    text_fix_last_line (tf);    text_make_hyperlinks();    text_build_headline (d, p);    text_make_hyperlinks();// we need to add another hyperlink//~     tf.paragraphs.everyItem().leading = 13;return 0;}// close main functionfunction text_FormatParagraphs(doc,tf){    var fTPref  = app.findTextPreferences;var cTPref = app.changeTextPreferences;		text_emptyFC();	// now loop thru the object to get all the greps	for(var j = 0;j < meta.db.projects.length;j++){        fTPref.appliedCharacterStyle = "h1 "+meta.db.projects[j].id;        cTPref.leading = 16;        if(util_checkhighlite (meta.db.projects[j].id)){        var res = doc.changeText();        }//~         alert(res);        text_emptyFC();	}	text_emptyFC();       	// now loop thru the object to get all the greps	for(var i = 0;i < meta.db.projects.length;i++){        fTPref.appliedCharacterStyle = "h2 "+meta.db.projects[i].id;        cTPref.leading = 16;                if(util_checkhighlite (meta.db.projects[i].id)){        var res = doc.changeText();        }//~         alert(res);        text_emptyFC();	}    	// now loop thru the object to get all the greps	for(var i = 0;i < meta.db.projects.length;i++){        fTPref.appliedCharacterStyle = "id "+meta.db.projects[i].id;        cTPref.leading = 12;                if(!util_checkhighlite (meta.db.projects[i].id)){        var res = doc.changeText();        }//~         alert(res);        text_emptyFC();	}         }function text_fix_last_line(tf){        for (var i  = 0; i < tf.paragraphs.length;i++){            if(tf.paragraphs.item(i).fillTint  == 100 && tf.paragraphs.item(i).characters.item(0).appliedCharacterStyle.name.match("body")){//~                     alert("found a fill");            tf.paragraphs.item(i).leading = 12;                    }                        }    }function text_build_headline(doc,page){    var x1 = meta.left;    var y1 = meta.ph - meta.bottom + meta.gutter;    var x2 = meta.pw - meta.right;    var y2 = meta.ph;     var tf = page.textFrames.add({geometricBounds:[y1,x1,y2,x2]});     var dt = new Date();    tf.contents = "6479: Fabian Morón Zirfas\n"+    "build on: " + dt.getFullYear() + "/"+dt.getMonth() + 1 + "/"+dt.getDate() +    "\nIn "+db_get_timespan ()+" days I made " + db_build_stats (doc) +". "+ text_count_words(doc)  +    " get the code over there http://fabiantheblind.github.com/incomOrg2Layout/";    tf.paragraphs.everyItem().appliedParagraphStyle = doc.paragraphStyles.item("head");        }function text_count_words(doc){    var str = "";	var ad = doc;	var tf = ad.textFrames;	var tflg = tf.length;		var wcount = 0;		var chcount = 0;		var pcount=0;		for(var i=0; i<tflg; i++)		{				var p = tf[i].paragraphs;			for(var l=0; l<p.length; l++)			{				pcount+=1;				wcount += p[l].words.length;				chcount += p[l].characters.length;			}		}//		french//		alert("Votre document comporte :"+"\r"//        	+ "- "+tflg+ " bloc(s) texte(s)" + "\r"//			+ "- "+pcount + " paragraphe(s)" + "\r"//			+ "- " +wcount + " mot(s)" + "\r" //			+ "- "+chcount + " caractère(s) avec espaces" + "\r" //			+ "- "+(chcount-spaced()) + " caractère(s) sans espaces");		str = "There is/are "+pcount + " paragraph(s)," + ""			+ " with " +wcount + " word(s)," + "" 			+ " with "+chcount + " character(s) (with whitespaces)" + "" 			+ " or "+(chcount-text_spaced()) + " character(s) (without whitespaces)";	return str;}function text_spaced(){	app.findGrepPreferences = app.changeGrepPreferences = null;	app.findGrepPreferences.findWhat="\s";	return app.activeDocument.findGrep().length;}function text_insertWithNL(txt,type){var lf = "<LF>";// we add this to the highlite projects to add a new line		if(type.match("legend")){		return  txt;		}else{	return lf + txt;	};}function text_add_and_format(tf,content,car,i,j,type){				var tempTF = tf.parent.textFrames.add({geometricBounds:[				meta.ph - 100, meta.left, meta.ph, meta.left+100]});			  	// from here on it is some kind of "manual" selection	//what to edit and highlite in the text			  	if(util_checkhighlite (meta.db.projects[i].id) == true){	//	// this is project White Noise	//var res = "";	if(meta.db.projects[i].posts[j].id == 17135 && type.match("post text")){	var txt = content;		res = text_tweakNoiseText(txt);		tempTF.contents = text_insertWithNL(res,type);		tempTF.paragraphs.everyItem().applyCharacterStyle(		app.activeDocument.characterStyles.item("whitenoise 1173"));				}else{				  				  		res = content;		tempTF.contents =   text_insertWithNL(res,type);		try{			tempTF.paragraphs.everyItem().applyCharacterStyle(			tempTF.parent.parent.characterStyles.item(car + " "+meta.db.projects[i].id)			);            		}catch(e){alert(car + "\n" + e );}                tempTF.paragraphs.everyItem().leading = 12;    	}// close else		tempTF.paragraphs.everyItem().fillTint = 100;	}else{		//		// this is all the other projects//~         if(type.match("post text") || type.match("text")){//~ 		tempTF.contents = content;//text_insertWithNL(content,type);//~         }else{		tempTF.contents = content;//text_insertWithNL(content,type);            //~             }		            tempTF.paragraphs.everyItem().applyCharacterStyle(			app.activeDocument.characterStyles.item(car + " " + meta.db.projects[i].id));        tempTF.paragraphs.everyItem().leading = 12;    		if(type.match("legend")){			tempTF.paragraphs.everyItem().fillTint = 100;	  		}	}	tempTF.previousTextFrame = tf;	tempTF.remove();}function text_tweakNoiseText(txt){var noiseTXT = new Array();var noiseVals = new Array();		noiseTXT = txt.split(",");	for(var n = 0; n < noiseTXT.length;n++){		var t = parseFloat(noiseTXT[n]);		noiseVals[n] = t.toFixed(10);		}	noiseVals.shift();		var str = "";	for(s = 0; s < noiseVals.length;s++){		if(noiseVals[s] >= 0 ){			str = str + "+" + noiseVals[s] + " \t ";		}else{			str = str  + noiseVals[s] + " \t ";		}	}return str;}function text_place(tf){				for(var i = 0; i < meta.db.projects.length; i++){					var dt1 = util_iso_to_datim(meta.db.projects[i].datetimeStart);		var dt2 = util_iso_to_datim(meta.db.projects[i].datetimeEnd);		var dt = dt1.getFullYear() + " "+dt1.getMonth() 		+" - " + dt2.getFullYear() + " "+dt2.getMonth() ;		text_add_and_format(tf,"<LF>id: "+ meta.db.projects[i].id+" ","id",i,0, "id");		text_add_and_format(tf,"timespan: " + dt + "","h2",i,0, "id");		text_add_and_format(tf,meta.db.projects[i].title+"","h1",i,0,"title");						try{			text_add_and_format(tf,meta.db.projects[i].workspace.title+"","h1",i,0,"title");			}catch(e){}				text_add_and_format(tf,meta.db.projects[i].text,"body",i,0,"text");		for(var j = 0; j < meta.db.projects[i].posts.length;j++){			text_add_and_format(tf,meta.db.projects[i].posts[j].titel,"h2",i,j,"post title");			text_add_and_format(tf,meta.db.projects[i].posts[j].text + "\n","body",i,j,"post text");							}	}}  function text_addLegend(tf){	text_add_and_format(tf,"\n\nlegend\n","h1",0,0,"legend");	for(var i = 0; i < meta.db.projects.length; i++){				text_add_and_format (tf, "id: " + meta.db.projects[i].id +" "+meta.db.projects[i].title+"\n", "id", i, 0, "legend");//~		tf.paragraphs.lastItem().fillTint = 100;	}}function text_takeOutTheTrash(doc){var findGrepPref  = app.findGrepPreferences;var chngGrepPref = app.changeGrepPreferences;var findTextPref  = app.findTextPreferences;var chngTextPref = app.changeTextPreferences;	text_set_FindChange_opt();	text_emptyFC();		// this is housekeepingvar strings = new Array();	strings[0] = "</span>";	strings[1] = "<span>";	strings[2] = "<ol>";	strings[3] = "</ol>";	strings[4] = "<li>";	strings[5] = "</li>";	strings[6] = "\t";	strings[7] = "<cite>";	strings[8] = "</cite>";	strings[9] = "</ul>";	strings[10] = "<ul>";	strings[11] = "<..>";	strings[12] = "<...>";	strings[13] = "<.>";	strings[14] = "</p>";	strings[15] = "<p>";	strings[16] = "<p >";	strings[17] = "</p >";	strings[18] = "style=“color: #000000;“";	strings[19]  = "style=“text-decoration: underline;“";	strings[20]  = "style=“text-decoration: underline;“";	strings[21]  = "style=“text-align: left;“";	strings[22]  = "style=“text-align: right;“";	strings[23]  = "style=“text-align: center;“";	strings[24]  = "</span >";	strings[25]  = "<span >";	strings[26]  = "style=“color: #";	strings[27]  = "span ";	strings[28]  = ";“";		strings.push("<br />");	strings.push("<h1>");	strings.push("<h2>");	strings.push("<h3>");		strings.push("</h3>");	strings.push("</h1>");	strings.push("</h2>");	strings.push("<hr />");	strings.push("</em>");	strings.push("<em>");	strings.push("<strong>");	strings.push("</strong>");	for(var i = 0;i < strings.length;i++){		text_set_FindChange_opt();		findTextPref.findWhat = strings[i];		chngTextPref.changeTo = "";		doc.changeText();		text_emptyFC();	}	text_emptyFC();		// replace some html encoded characters	var replaceS = new Array();	replaceS.push({"fw":";amp","to":"&"});	replaceS.push({"fw":"amp;","to":"&"});//~ var replaceT = new Array();//~	 replaceT.push("&");//~	 replaceT.push("&");		for(var j = 0;j < replaceS.length;j++){		text_set_FindChange_opt();		findTextPref.findWhat = replaceS[j].fw;		chngTextPref.changeTo = replaceS[j].to;		doc.changeText();		text_emptyFC();	}}function text_grepReformatting(doc){	var fGPref  = app.findGrepPreferences;var cGPref = app.changeGrepPreferences;var greps_ = new Array();	// use json objects to keep it tidy	// fw is the find what	// to is the change to	greps_.push({   "fw":"  +"	  ,		"to":" "});	greps_.push({   "fw":"\r "	  ,		"to":"\r"});	greps_.push({   "fw":" \r"	  ,		"to":"\r"});	greps_.push({   "fw":"\t\t+"	,	  "to":"\t"});	greps_.push({   "fw":"\r\t"	 ,	   "to":"\r"});	greps_.push({   "fw":"\t\r"	 ,	   "to":"\r"});	greps_.push({   "fw":"\r\r+"	,	  "to":" ~7 "});	greps_.push({   "fw":"\r"	   ,		 "to":" ~7 "});	greps_.push({   "fw":"\n"	   ,		 "to":" ~7 "});	greps_.push({   "fw":"~b"	   ,		 "to":" ~7 "});	greps_.push({   "fw":"~7 ~7"	,	  "to":" ~7 "});	greps_.push({   "fw":" ~7  ~7 " ,   "to":" ~7 "});	greps_.push({   "fw":"<LF>"	 ,	   "to":"\r"});// this is my personal linefeed	greps_.push({   "fw":"<a\ href\=\"(.*?)\">"	 ,	   "to":" $1 "});// find link    greps_.push({   "fw":"alt\=\".*?\""	 ,	   "to":" "});// fand alternate       greps_.push({   "fw":"<img src\=\"(.*?)\"\ {0,3}/>"	 ,	   "to":" $1 "});// find img as html	greps_.push({   "fw":"</a>"	 ,	   "to":" "});// find end of href tag	greps_.push({   "fw":"\&hellip;"	 ,	   "to":"&"});// find & in html	greps_.push({   "fw":"\&quot;"	 ,	   "to":"\""});// find quotew in html    greps_.push({   "fw":"~7\ \ {2,3}"	 ,	   "to":""});// also to many    greps_.push({   "fw":"\ ~7\ \ ~7\ "	 ,	   "to":"\ ~7\ "});//to many paragraph signs    greps_.push({   "fw":"\ \ "	 ,	   "to":"\ "});// double spaces	text_emptyFC();	// now loop thru the object to get all the greps	for(var j = 0;j < greps_.length;j++){		fGPref.findWhat = greps_[j].fw;		cGPref.changeTo = greps_[j].to;		doc.changeGrep();		text_emptyFC();	}	text_emptyFC();}/** * this function takes out html trash  * */function text_set_FindChange_opt(){		text_emptyFC();	//Set the find options.	app.findChangeGrepOptions.includeFootnotes = true;	app.findChangeGrepOptions.includeHiddenLayers = false;	app.findChangeGrepOptions.includeLockedLayersForFind = false;	app.findChangeGrepOptions.includeLockedStoriesForFind = true;	app.findChangeGrepOptions.includeMasterPages = true;	}function text_emptyFC(){	//Clear the find/change grep preferences.	app.findGrepPreferences = NothingEnum.nothing;	app.changeGrepPreferences = NothingEnum.nothing;		//Clear the find/change text preferences.	app.findTextPreferences = NothingEnum.nothing;	app.changeTextPreferences = NothingEnum.nothing;}function text_find_HTML_tags(doc) {	text_set_FindChange_opt();//~ var findGrepPref  = app.findGrepPreferences;//~ var chngGrepPref = app.changeGrepPreferences;//~ 	var findTXTPref  = app.findTextPreferences;var chngTXTPref = app.changeTextPreferences;		text_emptyFC();	var easyTagToPS = new Array();	easyTagToPS[0] = "h1";	easyTagToPS[1] = "h2";//~ 	easyTagToPS[2] = "h3";//~ 	easyTagToPS[3] = "h4";//~ 	easyTagToPS[4] = "h5";//~ 	easyTagToPS[5] = "h6";	for(var i = 0; i < easyTagToPS.length; i++){			findGrepPref.findWhat = "<"+ easyTagToPS[i] + ">(.*?)</" + easyTagToPS[i] + ">";				var res = doc.findText();		res.appliedParagraphStyle = easyTagToPS[i];		chngGrepPref.changeTo = "$1\r";//~		 chngGrepPref.appliedParagraphStyle = easyTagToPS[i];//~ 		chngGrepPref.appliedCharacterStyle = doc.characterStyles.item(0);		doc.changeGrep();		text_emptyFC();	}}function image_place(p,x,y,s){                                                        		  var x2 = x + meta.imgW;// calc the lower right corner x		  var y2 = y + meta.imgH; // calc the lower right corner y				var oval = p.ovals.add({						geometricBounds: [y,x,y2,x2],itemLayer:"content"									})					  ;//~ 		 grp.push(ovals[s]);		   		oval.itemLayer = "content";			try{				oval.label = meta.sortedFiles[s].filename;// add a scriptlabel				// now place the file				// if the file throws an error load the error.jpg				// the util_checkFileType() also sorts out files that cant be placed				if(meta.placeImages == true){								oval.place(				meta.flsFolder.fsName + "/" + 							util_checkFileType(							meta.sortedFiles[s].filename							)					);				                }				// end try				}catch(e){				   if(meta.DEBUG) alert( meta.sortedFiles[s].filename + "\n" + e);				 // so got an error place the error imgage instead				 oval.place(				meta.flsFolder.fsName + "/" +"error.jpg"				);				 oval.label = meta.sortedFiles[s].filename;					}// close catch                   return oval;   }function image_tint_and_fit(s,oval){try{    if(meta.sortedFiles[s].tint == true){        oval.images.item(0).fillColor = meta.sortedFiles[s].id + "";        }    }catch(e){        if(meta.DEBUG)$.writeln("Error while tintig the image \n"+e);}    oval.fit(FitOptions.FILL_PROPORTIONALLY);// center it    oval.fit(FitOptions.CENTER_CONTENT);// center it			try{// we have to check if the images are printable.// if the effectivePpi is under 280 we rescale the image// warning this gets overritten if we use the fiting laterif(meta.DEBUG) $.writeln(ovals[s].images.item(0).effectivePpi);// if the images are to small to printif(oval.images.item(0).effectivePpi[0] < 280 && util_checkhighlite (meta.sortedFiles[s].id) != true){    oval.images.item(0).horizontalScale = 24;				oval.images.item(0).verticalScale = 24;  	oval.images.item(0).fit(FitOptions.CENTER_CONTENT);// center it again	}}catch(e){ }} // END TINT// this builds an id string for the circle text// //function image_build_IDString(s){    var idString = "";    if(meta.sortedFiles[s].id == 0 ){        idString = meta.sortedFiles[s].text;		}else if(meta.sortedFiles[s].id != 0 && meta.sortedFiles[s].text.length < 1){		idString = meta.sortedFiles[s].type + "";// "id: "+meta.sortedFiles[s].id;        }else{        idString = meta.sortedFiles[s].type + ": " + meta.sortedFiles[s].text; 	}return idString;    }function image_editStroke(oval,s){//~         var bool = true; // this is for the project separator            oval.strokeWeight = 5;            oval.strokeColor = oval.parent.parent.swatches.item(meta.sortedFiles[s].id + "");                        oval.strokeAlignment = StrokeAlignment.CENTER_ALIGNMENT;            oval.fit(FitOptions.FILL_PROPORTIONALLY);            oval.fit(FitOptions.CENTER_CONTENT);         //~ 		try{// need this because we look forward one image//~           if(oval.label.match(meta.sortedFiles[s+1].id+".jpg") && s !=meta.sortedFiles.length){//~                 bool = false;// set it to false to dont add the colored circle//~                 oval.transparencySettings.blendingSettings.opacity=100;				// try to colorize the greyscale separator//~ 				oval.images.item(0).fillColor = meta.sortedFiles[s +1].id + "";//~ 		}// close new peoject match//~ 		}catch(e){//~ 		if(meta.DEBUG) $.writeln("error with "+//~         meta.sortedFiles[s].filename+//~         " image\n" + e +//~         "\nif this is the last image in the list it is okay");//~         //~         }// close catch        }// this is the main image place function// calls some other image_ functionsfunction image_group_build(d,p,x,y,ovals){        // loop thru all filesfor(var s = 0; s < meta.sortedFiles.length;s++){    var grp = new Array();// this will be the group        //~         	x = x + meta.imgW + meta.gutter; 	if((x >= meta.pw - (meta.right + meta.imgW + meta.gutter ))&&(meta.sortedFiles[s].type.match("year"))){	   x = meta.left;	   y = y + meta.gutter + meta.imgH;	}                ovals.push(image_place (p,x, y, s) ); // place the image into the circle            grp.push(ovals[s]);// push it into the group        image_tint_and_fit(s,ovals[s]);// Tint and fit it//~     Build the string for the image_ID    var idString = image_build_IDString (s);// build the string for the circle text        // build the circle text    var tf_id = image_ID (ovals[s],				   "image ul "+meta.sortedFiles[s].id,				   idString				   );        tf_id.itemLayer = "content";        grp.push(tf_id);				   // this adds a colored circle over the images// this happens only for the non highlited        if(meta.addImageOverlay == true){        image_editStroke (ovals[s], s);	} // CLOSE  OVERLAY 	x = x + meta.imgW + meta.gutter; 	if(x >= meta.pw - (meta.right )){	   x = meta.left;	   y = y + meta.gutter + meta.imgH;	}    lastBnds = ovals[s].geometricBounds;//~ var pressed = p.ovals.add({geometricBounds:lastBnds});    var groupedItem  = p.groups.add(grp);make_button(groupedItem, s);//~ var bttn = p.buttons.add({geometricBounds:groupedItem.geometricBounds});//~ var behave = bttn.gotoURLBehaviors.add();//~     behave.enableBehavior = true;//~     behave.url = meta.sortedFiles[s].preview;//~     //~ var st1 = bttn.states.add();//~ var st1ro = st1.ovals.add({//~     geometricBounds:lastBnds,//~     strokeWeight:0,//~     fillColor:d.swatches.item(meta.sortedFiles[s].id + "")});//~    //~  //~     //~ var st2 = bttn.states.add();//~ var st2ro = st2.ovals.add({//~     geometricBounds:lastBnds, //~     strokeWeight:0,//~     strokeColor:d.swatches.item(meta.sortedFiles[s].id + ""),//~     fillColor:d.swatches.item(meta.sortedFiles[s].id + "")//~     });             var lbl = "";    if(meta.sortedFiles[s].type.match("project")){        lbl = meta.sortedFiles[s].type+ " " + meta.sortedFiles[s].id;    }else{            lbl =     meta.sortedFiles[s].id + "";    }groupedItem.label = lbl;    } // close the images loopreturn lastBnds;}function image_addOverlay (doc, page, bounds, id){		var overlay = page.ovals.add({					geometricBounds:bounds			   }); // the circle			// it could be that the hihglite layer is active so push him back				overlay.itemLayer = "content";				overlay.applyObjectStyle(doc.objectStyles.item("overlay")); // object style				overlay.bringToFront(); // pull it to the front				// this is the styling for the overlay//~ 				if(!util_checkhighlite (id)){//~ 				overlay.fillColor = doc.swatches.item(id + "");//~ 				overlay.fillTint = 42;//~ 				}//~ 				overlay.strokeWeight = 5;//~ 				overlay.strokeAlignment = StrokeAlignment.CENTER_ALIGNMENT;//~			overlay.strokeTint = 23;				overlay.strokeColor = doc.swatches.item(id + "");								return overlay;	} function image_transfrom(rect, txt, id){	      if(util_checkhighlite (id)){	 var factor = 1.2;		   		   var vrScaleTM = app.transformationMatrices.add({			   verticalScaleFactor:factor});// scale vertical with the factor 0.7 makes it smaller	var hrScaleTM = app.transformationMatrices.add({		horizontalScaleFactor:factor});// scale horizontal with the factor 0.7 makes it smaller		rect.transform(		CoordinateSpaces.pasteboardCoordinates, AnchorPoint.centerAnchor, vrScaleTM); 		rect.transform(		CoordinateSpaces.pasteboardCoordinates, AnchorPoint.centerAnchor, hrScaleTM);		rect.fit(FitOptions.FILL_PROPORTIONALLY);		rect.fit(FitOptions.CENTER_CONTENT);//~ 		rect.itemLayer = "highlite";//~ 	 var tfID = image_ID(rect, "image ul " + id, txt+"");//~ 		 tfID.itemLayer = "highlite";		} 	 }    function image_ID(rect , car , txt ){	var offset = 0;//~	  if(txt.match("0")==true){//~			 txt = "";//~		  }else{//~			  "id: "+txt;//~			  }	var bnds = rect.geometricBounds;	var id = rect.parent.ovals.add({geometricBounds:		   [bnds[0] - offset,bnds[1] -offset,bnds[2]+offset 			,bnds[3]+offset]});		id.textPaths.add();//~		 var id = rect.parent.textFrames.add({//~			 geometricBounds:[bnds[0] - 5,bnds[1],bnds[2] //~			 + meta.gutter,bnds[3]],contents:txt});        		id.textPaths[0].contents = txt;		id.textPaths[0].paragraphs.everyItem().applyCharacterStyle(		rect.parent.parent.characterStyles.item(car));//~ 		try{//~             id.textPaths[0].lines.lastItem().pointSize = 6;//~             }catch(e){alert(e);}	var rotTM = app.transformationMatrices.add({				counterclockwiseRotationAngle:180				});// rotate (the 180 is for getting the line start upwards)					id.transform(CoordinateSpaces.pasteboardCoordinates, AnchorPoint.centerAnchor, rotTM);				id.applyObjectStyle(rect.parent.parent.objectStyles.item("image_id"));         id.strokeWeight = rect.parent.parent.characterStyles.item("image ul 0").pointSize +1;         id.strokeAlignment = StrokeAlignment.OUTSIDE_ALIGNMENT;         id.strokeColor = rect.parent.parent.swatches.item(2); // white         	 return id;	 }  