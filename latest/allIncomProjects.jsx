// allIncomProjects.jsx// this script places the content of the selected folder onto a page//// THIS STILL HAS SOME BUGS!!!//// based on InsertMultipleImages.js by Brian Reyman// http://www.adobe.com/cfusion/exchange/index.cfm?event=extensionDetail&extid=1046817// and theImageGrid.jsx by fabiantheblind// https://raw.github.com/fabiantheblind/theGrids/master/imageGrid/theImageGrid.jsx// Copyright (C) 2011 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses/#include "db.json"//~ our project for this script is stunning white noise id 1173//~ id: 189 title: DUKOMENTATION IAIV Fabian Mor&Ucirc;n Zirfas//~ id: 700 title: [Corporate Motion] SPECTRE//~ id: 1173 title: Stunning White Noise//~ id: 1179 title: DisasterManagement//~ id: 1297 title: UEA2//~ id: 1488 title: Incom(API) 2 &hellip;//~ id: 1791 title: Praktikumsemester Forseesense//~ id: 1792 title: Kopf Hand Fuss F. Mor&oacute;n Zirfas//~ id: 1793 title: noise mashine//~ id: 1751 title: Garfikdesign &quot;T.I.L.Y. &amp;&amp; Anti.Soc.Icon.&quot;//~ id: 1752 title: Advertising Design Help//~ id: 1753 title: CutUP.14 Corporate Deathmatch//~ id: 1754 title: Produktdesign/Digitale Medien FFF//~ id: 1755 title: Lug und Trug Recycling//~ id: 1756 title: Kultur-, Kunst- und Designgeschichte Feng Mengbo//~ id: 1757 title: Blue Ocean Gero//~ id: 1758 title: Produktion von Printmedien FMZ//~ id: 1759 title: Design Versprechen Konfetti//~ id: 1798 title: InDesign Scripting Tutorial//~ id: 1799 title: Americas Army Serious Games//~ id: 1800 title: Grundkurs C / C++//~ id: 1362 title: UE_Laermvar meta = new Object();    meta.db = data;// this comes from the included db.json    meta.prjList = [1173, 1362, 1754]; // the projects to highlite    meta.DEBUG = false;    meta.pw = 3000; // this will hold the page width    meta.ph = 841; // this will hold the page width    meta.flsFolder = null;// the folder for the images    meta.allImages = null;// the images    meta.imgW = 50;    meta.imgH = 50;       meta.gutter = 10;            meta.step = 1; // the step for selecting the images        // these are the margins    meta.left = 23;    meta.right = 23;    meta.top = 50;    meta.bottom = 50;    meta.cCount = 10;    meta.sortedFiles = null; //~ var DEBUG = false; // this is for debugging     sortDBbyStartTime();    removeFirstElement();//~     if(meta.DEBUG) alertProjectList();    buildImgListFromDB();//~     alert(meta.sortedFiles );    meta.gutter = (((meta.pw - meta.left) -meta.right) - 42*meta.imgW) / 41;  // the distance between the images     main();// everything happens in here// you need a function to cancel a scriptfunction main(){	var d = app.documents.add(); //build a basic document    makeStyles(d); // build some paragrph styles    makeDoc (d);// build the document    loadFiles();// opens a prompt and lets the user choose a folder      // now calc the size of the doc depending on the colums and rows    // the number of columns times the image width plus the gutter times the columns minus one column    // than add the left and the right    // same thing for the height with the rows and the top and the bottomvar p = d.pages.item(0);// finally - get the first page    p.appliedMaster = d.masterSpreads.item(0);// apply the masterspread   //~     var i = 0; // for counting images//~     var count = 0; // for counting image frames    if(meta.DEBUG==true)$.writeln (meta.allImages.length);// this is just debug      var rects  = new Array();// an array for the retangles   var t = meta.top;    var b = meta.bottom;   var l = meta.left;   var r = meta.right;         var x = meta.left;   var y = meta.top;   var x2 = x + meta.imgW;   var y2 = y + meta.imgH;      for(var s = 0; s < meta.allImages.length;s++){                 var x2 = x + meta.imgW;          var y2 = y + meta.imgH;        rects.push(                    p.rectangles.add({                        geometricBounds: [y,x,y2,x2]                                    })                      );                                  try{                rects[s].place(                meta.flsFolder.fsName + "/" + checkFileType(meta.sortedFiles[s])                );                }catch(e){//~                    if(meta.DEBUG) alert(e+ " "+ meta.sortedFiles[i]);                  rects[s].place(                meta.flsFolder.fsName + "/" +"error.jpg"                );                rects[s].label = meta.sortedFiles[s];                    } // place the image into the rectangle                            rects[s].fit(FitOptions.PROPORTIONALLY); // fit it to the frame            rects[s].fit(FitOptions.CENTER_CONTENT);// center it                            try{               if(meta.DEBUG) $.writeln(rects[s].images.item(0).effectivePpi);                if(rects[s].images.item(0).effectivePpi[0] < 280){                rects[s].images.item(0).horizontalScale = 24;                        rects[s].images.item(0).verticalScale = 24;              rects[s].images.item(0).fit(FitOptions.CENTER_CONTENT);// center it again            }}catch(e){}            rects[s].strokeWeight = 0;// dont want a stroke       	rects[s].textWrapPreferences.properties = {            textWrapMode: TextWrapModes.BOUNDING_BOX_TEXT_WRAP//~             textWrapOffset:[5,5,5,5]            };                          x = x + meta.imgW + meta.gutter;        if(x >= meta.pw - meta.imgW){       x = meta.left;       y = y + meta.gutter + meta.imgH;       }   }         //~     for(var y1 = t; y1 < meta.ph - b; y1 += meta.imgH+ meta.gutter){//~         for(var x1 = l; x1 < meta.pw- r; x1 += meta.imgW + meta.gutter){//~             // now push the rect to the array//~             rects.push(//~                     p.rectangles.add({//~                         geometricBounds: [y1,x1,y1 + meta.imgH,x1 + meta.imgW]//~                                     })//~                       );//~                       //~             try{//~                 rects[count].place(//~                 meta.flsFolder.fsName + "/" + checkFileType(meta.sortedFiles[i])//~                 );//~                 }catch(e){//~                    if(meta.DEBUG) alert(e+ " "+ meta.sortedFiles[i]);//~                   rects[count].place(//~                 meta.flsFolder.fsName + "/" +"error.jpg"//~                 );   //~                     } // place the image into the rectangle//~                 //~             rects[count].fit(FitOptions.PROPORTIONALLY); // fit it to the frame//~             rects[count].fit(FitOptions.CENTER_CONTENT);// center it//~                 //~             try{//~                if(meta.DEBUG) $.writeln(rects[count].images.item(0).effectivePpi);//~                 if(rects[count].images.item(0).effectivePpi[0] < 280){//~                 rects[count].images.item(0).horizontalScale = 24;            //~             rects[count].images.item(0).verticalScale = 24;  //~             rects[count].images.item(0).fit(FitOptions.CENTER_CONTENT);// center it again//~             }}catch(e){}//~             rects[count].strokeWeight = 0;// dont want a stroke//~             //~             if(meta.DEBUG==true) $.writeln(i); // this is for debug//~             //~             i+=meta.step;// now get the next image//~             count++;// a index for next rectangles//~             //~             // at some point we have to stop the loop//~             //to not exeed the number of images we have//~             if(i > meta.sortedFiles.length ){//~                 break;//~                 }//~             } // close for loop x1//~          if(i > meta.sortedFiles.length  ){//~           break;//~           }//~         }// close for loop y1}// close main functionfunction buildImgListFromDB(){        var allFiles = new Array();    for(var x = 0; x < meta.db.projects.length;x++){            var pr = meta.db.projects[x];        allFiles.push(pr.image.filename);        for(var y = 0; y < pr.files.length; y++){           if(meta.DEBUG) $.writeln (y + " " + pr.files[y].type);            if(pr.files[y].type.match("file")){                    allFiles.push(pr.files[y].filename);                    }            }                        var posts = meta.db.projects[x].posts;       for(var i = 0; i < posts.length;i++){            var m = posts[i].media;            for(var j = 0; j < m.length; j++){                if(m[j].type.match("file")){                    allFiles.push(m[j].filename);                    }                }// close j loop            }// close i loop        }    //~     // the regexp patterns to sort out files//~     // that cant be placed like images in indesign//~     var pts = new Array();//~         pts.push("\\.pdf");//~      pts.push("\\.mov");//~      pts.push("\\.zip");//~      pts.push("\\.rtf");//~      pts.push("\\.dmg");//~      //~      var fls = new Array();//~      fls.push("pdf.jpg");//~      fls.push("mov.jpg");//~      fls.push("zip.jpg");//~      fls.push("rtf.jpg");//~      fls.push("dmg.jpg");//~    //~     // now check for them//~     for(var a = 0; a < allFiles.length; a++){//~         for(var b = 0; b < pts.length;b++){//~         var reg = new RegExp(pts[b]);//~         if(allFiles[a].match(reg)){//~             allFiles[a] = fls[b];//~             }//~        //~             }//~         }            meta.sortedFiles = allFiles;    }function checkFileType(fn){        // the regexp patterns to sort out files    // that cant be placed like images in indesign    var pts = new Array();        pts.push("\\.pdf");     pts.push("\\.mov");     pts.push("\\.zip");     pts.push("\\.rtf");     pts.push("\\.dmg");          var fls = new Array();     fls.push("pdf.jpg");     fls.push("mov.jpg");     fls.push("zip.jpg");     fls.push("rtf.jpg");     fls.push("dmg.jpg");             for(var b = 0; b < pts.length;b++){        var reg = new RegExp(pts[b]);        if(fn.match(reg)){            fn = fls[b];            }                   }                    return fn;    }    /**     * this sorts by starttime     */function sortDBbyStartTime(){      meta.db.projects.sort(custom_sort);           }   /**    * this is a fix for an old project    */function removeFirstElement(){    meta.db.projects.shift();    }function alertProjectList(){    var txt = "";for(var i = 0; i < meta.db.projects.length; i++){    var p = meta.db.projects[i];    txt = txt + "id: "+p.id+ " title: "+p.title + " time: "+ p.datetimeStart+"\n";//~     if(p.id == 1362 ){//~     prjcts.push(p); //sel + p.toSource () + "\n";//~     }//~     if( p.id == 1173 ){//~     p2 = p; //sel = sel + p.toSource () + "\n";//~     }//~     if( p.id == 1754){//~     p3 = p; //sel = sel + p.toSource () + "\n";//~     }     }           //~ alert(dt);alert(txt);        }// found here// http://stackoverflow.com/questions/3859239/sort-json-by-datefunction custom_sort(a, b) {    return new Date(iso_to_datim(a.datetimeStart)).getTime() - new Date(iso_to_datim(b.datetimeStart)).getTime();}// found here// http://www.topsoft.at/pstrainer/pstrainer.phpfunction iso_to_datim(iso) {var d=null;var len=iso.length;if(len>=19) {var hh=parseInt(iso.substr(11,2),10);var mi=parseInt(iso.substr(14,2),10);var ss=parseInt(iso.substr(17,2),10);}else {var hh=0; var mi=0; var ss=0;}if(len>=10) {var yy=parseInt(iso.substr(0,4),10);var mo=parseInt(iso.substr(5,2),10)-1;var dd=parseInt(iso.substr(8,2),10);d = new Date(yy,mo,dd,hh,mi,ss);}else {d=new Date();}return d;}function loadFiles(){        // define the folder and the filetype	var theFolder = Folder.selectDialog ("Choose the FOLDER to import \".tif\" images from");     // if the user cancels the folder dialog     // cancel the script    if(!theFolder){        return;// this cancels the whole function main()        }	var theFileType = "*.*";// only use tif files could also be jpg    // get all images into an array    var temp = null;    try{    temp = theFolder.getFiles(theFileType);        }catch(e){alert("Error with this: " + e);}    var allImages = temp;    if((allImages == "")||(allImages == null) ){        if(meta.DEBUG)alert("There aare no images");        return;        }    meta.flsFolder = theFolder;// to get them all everywhere    meta.allImages = allImages;    }function makeStyles(doc){           var h1 = doc.paragraphStyles.add({name:"h1"});            h1.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 123                                };            var h2 = doc.paragraphStyles.add({name:"h2"});            h2.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 42                                };                        var body = doc.paragraphStyles.add({name:"body"});            body.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 24                                };                        var wNoise = doc.paragraphStyles.add({name:"whitenoise"});            wNoise.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 10                                };            var imgUL = doc.paragraphStyles.add({name:"image ul"});            wNoise.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 8                                };            }function makeDoc(doc){            // set some parametersdoc.viewPreferences.properties = {    horizontalMeasurementUnits: MeasurementUnits.MILLIMETERS,    verticalMeasurementUnits:MeasurementUnits.MILLIMETERS    };    	doc.documentPreferences.properties = {		pageWidth : meta.pw,		pageHeight : meta.ph,        facingPages:false	};var msp1 = doc.masterSpreads.item(0).pages.item(0);// edit the masterspreads	msp1.marginPreferences.properties = {        right:meta.right,        top:meta.top,        left:meta.left,        bottom:meta.bottom,        columnGutter:meta.gutter,        columnCount:meta.cCount    };  var msp2 = doc.masterSpreads.item(0).pages.item(1);//edit the other masterspred	msp2.marginPreferences.properties = {      right:meta.right,        top:meta.top,        left:meta.left,        bottom:meta.bottom,        columnGutter:meta.gutter,        columnCount:meta.cCount    };      }// end make doc