// allIncomProjects.jsx// this script places all incom projects onto a large page//// based on InsertMultipleImages.js by Brian Reyman// http://www.adobe.com/cfusion/exchange/index.cfm?event=extensionDetail&extid=1046817// and theImageGrid.jsx by fabiantheblind// https://raw.github.com/fabiantheblind/theGrids/master/imageGrid/theImageGrid.jsx// Copyright (C) 2011 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses/#include "db.json"//~ our project for this script is stunning white noise id 1173//~ id: 189 title: DUKOMENTATION IAIV Fabian Mor&Ucirc;n Zirfas//~ id: 700 title: [Corporate Motion] SPECTRE//~ id: 1173 title: Stunning White Noise//~ id: 1179 title: DisasterManagement//~ id: 1297 title: UEA2//~ id: 1488 title: Incom(API) 2 &hellip;//~ id: 1791 title: Praktikumsemester Forseesense//~ id: 1792 title: Kopf Hand Fuss F. Mor&oacute;n Zirfas//~ id: 1793 title: noise mashine//~ id: 1751 title: Garfikdesign &quot;T.I.L.Y. &amp;&amp; Anti.Soc.Icon.&quot;//~ id: 1752 title: Advertising Design Help//~ id: 1753 title: CutUP.14 Corporate Deathmatch//~ id: 1754 title: Produktdesign/Digitale Medien FFF//~ id: 1755 title: Lug und Trug Recycling//~ id: 1756 title: Kultur-, Kunst- und Designgeschichte Feng Mengbo//~ id: 1757 title: Blue Ocean Gero//~ id: 1758 title: Produktion von Printmedien FMZ//~ id: 1759 title: Design Versprechen Konfetti//~ id: 1798 title: InDesign Scripting Tutorial//~ id: 1799 title: Americas Army Serious Games//~ id: 1800 title: Grundkurs C / C++//~ id: 1362 title: UE_Laermvar meta = new Object();    meta.db = data;// this comes from the included db.json    meta.prjList = [1173, 1362, 1754]; // the projects to highlite    meta.DEBUG = false; // this is for debugging    meta.pw = 3000; // this will hold the page width    meta.ph = 841; // this will hold the page width    meta.flsFolder = null;// the folder for the images//~     meta.allImages = null;// the images    meta.imgW = 25; // the image sizes    meta.imgH = 25;   //~     meta.step = 1; // the step for selecting the images        // these are the margins    meta.left = 23;    meta.right = 23;    meta.top = 50;    meta.bottom = 50;        meta.cCount = 75;        // this will be filled with data from the db.json    // sorted by startdate    meta.sortedFiles = null;      sortDBbyStartTime();    removeFirstElement();// removes old junk    if(meta.DEBUG) alertProjectList();    buildImgListFromDB();    // calculate the gutter depending on how many images per column    meta.gutter = (((meta.pw - meta.left) -meta.right) - meta.cCount*meta.imgW) / meta.cCount -1;  // the distance between the images      main();// everything happens in here// you need a function to cancel a scriptfunction main(){var d = app.documents.add(); //build a basic document    makeStyles(d); // build some paragrph styles    makeDoc (d);// build the document    loadFiles();// opens a prompt and lets the user choose a foldervar p = d.pages.item(0);// finally - get the first page    p.appliedMaster = d.masterSpreads.item(0);// apply the masterspread   //~     var i = 0; // for counting images//~     var count = 0; // for counting image frames    if(meta.DEBUG==true)$.writeln (meta.sortedFiles.length);// this is just debug      var rects  = new Array();// an array for the retangles  var overlay = new Array();    var t = meta.top;    var b = meta.bottom;   var l = meta.left;   var r = meta.right;         var x = meta.left;   var y = meta.top;   var x2 = x + meta.imgW;   var y2 = y + meta.imgH;      for(var s = 0; s < meta.sortedFiles.length;s++){        // some debugging//~        if(meta.DEBUG){//~             if(meta.sortedFiles[s].id == 1754){alert("image from project 1754");//~             }//~        }             var smaller = false; // resize the images          var x2 = x + meta.imgW;// calc the lower right corner x          var y2 = y + meta.imgH; // calc the lower right corner y                rects.push(                    p.rectangles.add({                        geometricBounds: [y,x,y2,x2]                                    })                      );                                  try{                rects[s].label = meta.sortedFiles[s].filename;// add a scriptlabel                // now place the file                // if the file throws an error load the error.jpg                // the checkfiletype() also sorts out files that cant be placed                rects[s].place(                meta.flsFolder.fsName + "/" +                             checkFileType(                            meta.sortedFiles[s].filename                            )                );                // end try                }catch(e){                   if(meta.DEBUG) alert( meta.sortedFiles[s].filename + "\n" + e);                 // so got an error place the error imgage instead                 rects[s].place(                meta.flsFolder.fsName + "/" +"error.jpg"                );                rects[s].label = meta.sortedFiles[s].filename;                    }// close catch                            rects[s].fit(FitOptions.PROPORTIONALLY); // fit it to the frame            rects[s].fit(FitOptions.CENTER_CONTENT);// center it                        try{               if(meta.DEBUG) $.writeln(rects[s].images.item(0).effectivePpi);                                   // if the images are to small to print                    if(rects[s].images.item(0).effectivePpi[0] < 280){                        rects[s].images.item(0).horizontalScale = 24;                                    rects[s].images.item(0).verticalScale = 24;                          rects[s].images.item(0).fit(FitOptions.CENTER_CONTENT);// center it again                }                               }catch(e){                            }                                   if(meta.sortedFiles[s].id == meta.prjList[0]){                rects[s].applyObjectStyle(d.objectStyles.item("images"));                                }else if(meta.sortedFiles[s].id == meta.prjList[1]){                rects[s].applyObjectStyle(d.objectStyles.item("images"));                                }else if(meta.sortedFiles[s].id == meta.prjList[2]){                rects[s].applyObjectStyle(d.objectStyles.item("images"));                                }else{                // overlay the images with a white image               var overlay = p.rectangles.add({               geometricBounds:rects[s].geometricBounds               });                      overlay.applyObjectStyle(d.objectStyles.item("overlay"));           overlay.bringToFront();           overlay.fillColor = d.swatches.item(2);           rects[s].applyObjectStyle(d.objectStyles.item("imagesBlend"));           }              	rects[s].textWrapPreferences.properties = {            textWrapMode: TextWrapModes.BOUNDING_BOX_TEXT_WRAP//~             textWrapOffset:[5,5,5,5]            };                   x = x + meta.imgW + meta.gutter;        if(x >= meta.pw - meta.imgW - meta.right){       x = meta.left;       y = y + meta.gutter + meta.imgH;       }   } // close the images loop         // now lts make some text   // jihhhaaaaaa         }// close main functionfunction buildImgListFromDB(){        var allFiles = new Array();    for(var x = 0; x < meta.db.projects.length;x++){            var pr = meta.db.projects[x];        allFiles.push({"filename":pr.image.filename,"date":pr.datetimeStart,"id":pr.id});        for(var y = 0; y < pr.files.length; y++){           if(meta.DEBUG) $.writeln (y + " " + pr.files[y].type);            if(pr.files[y].type.match("file")){                    allFiles.push({"filename":pr.files[y].filename,"date":pr.datetimeStart,"id":pr.id});                    }            }                        var posts = meta.db.projects[x].posts;       for(var i = 0; i < posts.length;i++){            var m = posts[i].media;            for(var j = 0; j < m.length; j++){                if(m[j].type.match("file")){                    allFiles.push({"filename":m[j].filename,"date":pr.datetimeStart,"id":pr.id});                    }                }// close j loop            }// close i loop        }    meta.sortedFiles = allFiles;    }function checkFileType(fn){        // the regexp patterns to sort out files    // that cant be placed like images in indesign    var pts = new Array();        pts.push("\\.pdf");     pts.push("\\.mov");     pts.push("\\.zip");     pts.push("\\.rtf");     pts.push("\\.dmg");          var fls = new Array();     fls.push("pdf.jpg");     fls.push("mov.jpg");     fls.push("zip.jpg");     fls.push("rtf.jpg");     fls.push("dmg.jpg");             for(var b = 0; b < pts.length;b++){        var reg = new RegExp(pts[b]);        if(fn.match(reg)){            fn = fls[b];            }                   }                    return fn;    }    /**     * this sorts by starttime     */function sortDBbyStartTime(){      meta.db.projects.sort(custom_sort);           }   /**    * this is a fix for an old project    */function removeFirstElement(){    meta.db.projects.shift();    }function alertProjectList(){    var txt = "";for(var i = 0; i < meta.db.projects.length; i++){    var p = meta.db.projects[i];    txt = txt + "id: "+p.id+ " title: "+p.title + " time: "+ p.datetimeStart+"\n";//~     if(p.id == 1362 ){//~     prjcts.push(p); //sel + p.toSource () + "\n";//~     }//~     if( p.id == 1173 ){//~     p2 = p; //sel = sel + p.toSource () + "\n";//~     }//~     if( p.id == 1754){//~     p3 = p; //sel = sel + p.toSource () + "\n";//~     }     }           //~ alert(dt);alert(txt);        }// found here// http://stackoverflow.com/questions/3859239/sort-json-by-datefunction custom_sort(a, b) {    return new Date(iso_to_datim(a.datetimeStart)).getTime() - new Date(iso_to_datim(b.datetimeStart)).getTime();}// found here// http://www.topsoft.at/pstrainer/pstrainer.phpfunction iso_to_datim(iso) {    var d=null;    var len=iso.length;        if(len>=19) {        var hh = parseInt(iso.substr(11,2),10);        var mi = parseInt(iso.substr(14,2),10);        var ss = parseInt(iso.substr(17,2),10);        }else {            var hh=0;            var mi=0;            var ss=0;            }        if(len>=10) {        var yy = parseInt(iso.substr(0,4),10);        var mo = parseInt(iso.substr(5,2),10)-1;        var dd = parseInt(iso.substr(8,2),10);        d = new Date(yy,mo,dd,hh,mi,ss);        }else{            d=new Date();            }    return d;}function loadFiles(){        // define the folder and the filetype	var theFolder = Folder.selectDialog ("Choose the FOLDER to import \".tif\" images from");     // if the user cancels the folder dialog     // cancel the script    if(!theFolder){        return;// this cancels the whole function main()        }	var theFileType = "*.*";// only use tif files could also be jpg    // get all images into an array    var temp = null;    try{    temp = theFolder.getFiles(theFileType);              }catch(e){           alert("Error with this\n" +e);           }// end catch      var allImages = temp;    if((allImages == "")||(allImages == null) ){        if(meta.DEBUG)alert("There aare no images");        return;              }    meta.flsFolder = theFolder;// to get them all everywhere    meta.allImages = allImages;    }function makeStyles(doc){var objSt1  = doc.objectStyles.add();objSt1.properties = {        name:"imagesBlend",        strokeWeight: 0,        transparencySettings:{                blendingSettings:{                    opacity:23                    }                }        };var objSt2  = doc.objectStyles.add();objSt2.properties = {        name:"images",        strokeWeight: 0        };var objSt3  = doc.objectStyles.add();objSt3.properties = {        name:"overlay",        strokeWeight: 0,          transparencySettings:{                blendingSettings:{                    blendMode: BlendMode.COLOR                    }                }        };                   var h1 = doc.paragraphStyles.add({name:"h1"});            h1.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 123                                };            var h2 = doc.paragraphStyles.add({name:"h2"});            h2.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 42                                };                        var body = doc.paragraphStyles.add({name:"body"});            body.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 24                                };                        var wNoise = doc.paragraphStyles.add({name:"whitenoise"});            wNoise.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 10                                };            var imgUL = doc.paragraphStyles.add({name:"image ul"});            wNoise.properties = {            appliedFont : "DejaVu Serif	Book",            pointSize: 8                                };            }function makeDoc(doc){            // set some parametersdoc.viewPreferences.properties = {    horizontalMeasurementUnits: MeasurementUnits.MILLIMETERS,    verticalMeasurementUnits:MeasurementUnits.MILLIMETERS    };    	doc.documentPreferences.properties = {		pageWidth : meta.pw,		pageHeight : meta.ph,        facingPages:false	};var msp1 = doc.masterSpreads.item(0).pages.item(0);// edit the masterspreads	msp1.marginPreferences.properties = {        right:meta.right,        top:meta.top,        left:meta.left,        bottom:meta.bottom,        columnGutter:meta.gutter,        columnCount:meta.cCount    };  var msp2 = doc.masterSpreads.item(0).pages.item(1);//edit the other masterspred	msp2.marginPreferences.properties = {      right:meta.right,        top:meta.top,        left:meta.left,        bottom:meta.bottom,        columnGutter:meta.gutter,        columnCount:meta.cCount    };      }// end make doc