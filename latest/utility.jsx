/*** @@@BUILDINFO@@@ utility.jsx 1.0 Tue Jan 31 2012 15:29:09 GMT+0100*/// Copyright (C) 2012 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses/function util_calc_timespan_in_days(strt,nd){//Set the two dates//~ nd=new Date()//~ var christmas=new Date(today.getFullYear(), 11, 25) //Month is 0-11 in JavaScript//~ if (today.getMonth()==11 && today.getDate()>25) //if Christmas has passed already//~ christmas.setFullYear(christmas.getFullYear()+1) //calculate next year's Christmas//Set 1 day in millisecondsvar one_day=1000*60*60*24;//Calculate difference btw the two dates, and convert to days//~ $.write(Math.ceil((strt.getTime()-nd.getTime())/(one_day)) + " days left until Christmas!");var days = Math.abs(Math.ceil((strt.getTime()-nd.getTime())/(one_day)));return days;}/* * Loads files from a folder. use the prompt if  */function util_get_MinMax( arr ){var max = arr[0];var min = arr[0];for(var i=0; i < arr.length;i++){max = Math.max(max, arr[i]);min = Math.min( min, arr[i]);}//~ alert("Array: "+ arr +", Max: "+max+", Min: "+min);return {"max":max,"min":min};}function util_getfilesFolder(){		// define the folder and the filetype          var theFolder = Folder("~/Documents/Dropbox/incom2layoutFilesGrey");//Folder.selectDialog ("Choose the FOLDER to import the images from");      //~	 alert(theFolder);	// if the user cancels the folder dialog	 // cancel the script	if(!theFolder){		return;// this cancels the whole function main \(\)		}	var theFileType = "*.*";// could also be "*.jpg" JPG only	// get all images into an array	var temp = null;	    try{	temp = theFolder.getFiles(theFileType);	   	   }catch(e){		   if(meta.DEBUG)alert("Error with this\n" +e);		   }// end catch      var allImages = temp;	if((allImages == "")||(allImages == null) ){		if(meta.DEBUG)alert("There are no images");		return;	   	   }   	meta.flsFolder = theFolder;// to get them all everywhere    	}function util_alertProjectList(){	var txt = "";for(var i = 0; i < meta.db.projects.length; i++){	var p = meta.db.projects[i];	txt = txt + "id: "+p.id+ " title: "+p.title + " time: "+ p.datetimeStart+"\n";//~	 if(p.id == 1362 ){//~	 prjcts.push(p); //sel + p.toSource () + "\n";//~	 }//~	 if( p.id == 1173 ){//~	 p2 = p; //sel = sel + p.toSource () + "\n";//~	 }//~	 if( p.id == 1754){//~	 p3 = p; //sel = sel + p.toSource () + "\n";//~	 } 	}		   //~ alert(dt);alert(txt);		}function util_set_tint(fn){    // the regexp patterns to sort out files	// that cant be placed like images in indesign	// use JSON to keep it tidy	 var tint = false ;	 var flsList = new Array();//~	  flsList.push({"pattern":"\\.pdf","file":"pdf.jpg"});	  flsList.push({"pattern":"\\.txt","file":"txt.jpg","type":"txt"});	 flsList.push({"pattern":"\\.mov","file":"mov.jpg","type":"movie"});	 flsList.push({"pattern":"\\.zip","file":"zip.jpg","type":"archive"});	 flsList.push({"pattern":"\\.rtf","file":"rtf.jpg","type":"text"});	 flsList.push({"pattern":"\\.dmg","file":"dmg.jpg","type":"archive"});			 for(var b = 0; b < flsList.length;b++){			var reg = new RegExp(flsList[b].pattern);			if(fn.match(reg)){//~ 				fn = flsList[b].file;             tint = true;                 break;                }else{             tint = false;                    }	   			}					return tint;    }function util_setFileType(fn){	// the regexp patterns to sort out files	// that cant be placed like images in indesign	// use JSON to keep it tidy	 var type = null;	 var flsList = new Array();     	  flsList.push({"pattern":"\\.txt","file":"txt.jpg","type":"txt"});	  flsList.push({"pattern":"\\.pdf","file":"pdf.jpg","type":"pdf"});	 flsList.push({"pattern":"\\.mov","file":"mov.jpg","type":"movie"});	 flsList.push({"pattern":"\\.zip","file":"zip.jpg","type":"archive"});	 flsList.push({"pattern":"\\.rtf","file":"rtf.jpg","type":"text"});	 flsList.push({"pattern":"\\.dmg","file":"dmg.jpg","type":"archive"});			 for(var b = 0; b < flsList.length;b++){			var reg = new RegExp(flsList[b].pattern);			if(fn.match(reg)){//~ 				fn = flsList[b].file;             type = flsList[b].type                 break;                }else{             type = "image";                    }	   			}					return type;	}// replace the files that cant be placed from indesign with placeholdersfunction util_checkFileType(fn){	// the regexp patterns to sort out files	// that cant be placed like images in indesign	// use JSON to keep it tidy	 	 var flsList = new Array();//~	  flsList.push({"pattern":"\\.pdf","file":"pdf.jpg"});	 flsList.push({"pattern":"\\.txt","file":"txt.jpg"});	 flsList.push({"pattern":"\\.mov","file":"mov.jpg"});	 flsList.push({"pattern":"\\.zip","file":"zip.jpg"});	 flsList.push({"pattern":"\\.rtf","file":"rtf.jpg"});	 flsList.push({"pattern":"\\.dmg","file":"dmg.jpg"});			 for(var b = 0; b < flsList.length;b++){			var reg = new RegExp(flsList[b].pattern);			if(fn.match(reg)){				fn = flsList[b].file;				}			}                // replace the pngs with jpg        // you have to convert them first and place them into the folder	var pt = "\\.png";    var r = new RegExp(pt);    if(fn.match(r)){        var newName = fn.substr(0,fn.length - 4) + ".jpg";//~         alert(newName);        fn = newName;		}        // same here like the pngs	var pt2 = "\\.pdf";    var r2 = new RegExp(pt2);    if(fn.match(r2)){        var newName = fn.substr(0,fn.length - 4) + ".jpg";//~         alert(newName);        fn = newName;		}    	return fn;	}// this function sorts by time// found here// http://stackoverflow.com/questions/3859239/sort-json-by-datefunction util_custom_sort(a, b) {	return new Date(util_iso_to_datim(a.datetimeStart)).getTime() - 	new Date(util_iso_to_datim(b.datetimeStart)).getTime();}// this turns the iso dates from the DB to JS Date Objects// found here// http://www.topsoft.at/pstrainer/pstrainer.phpfunction util_iso_to_datim(iso) {var d=null;var len=iso.length;	if(len>=19) {		var hh = parseInt(iso.substr(11,2),10);		var mi = parseInt(iso.substr(14,2),10);		var ss = parseInt(iso.substr(17,2),10);		}else {			var hh=0;			var mi=0;			var ss=0;			}		if(len>=10) {		var yy = parseInt(iso.substr(0,4),10);		var mo = parseInt(iso.substr(5,2),10)-1;		var dd = parseInt(iso.substr(8,2),10);		d = new Date(yy,mo,dd,hh,mi,ss);		}else{			d=new Date();    }return d;}// this checks if an id is in the highlite object////function util_checkhighlite(id){		var bool = false;	for(var i = 0; i < meta.highlite.length; i++){				if(id == meta.highlite[i].id && id != 0){			bool = true;			break			}				}	return bool;	}// in this case all the projects are in highlite// if not some text is smaller and greyfunction util_build_highliteList(){    var list = new Array();            list.push({"id":0, "name":"0","col":[255,255,255]});	        for(var i in meta.db.projects){        list.push({"id":meta.db.projects[i].id,"name":meta.db.projects[i].id+"","col":[255,255,255]});                }return list;        }function util_image_tint_and_fit(id,oval){                oval.images.item(0).fillColor = id + "";                oval.fit(FitOptions.FILL_PROPORTIONALLY);// center it                oval.fit(FitOptions.CENTER_CONTENT);// center it} // END TINT// the functions below are// by Peter the Magnificant Kahrel// http://www.kahrel.plus.com/indesign/scriptui.htmlfunction  util_insepct_properties (f) {$.writeln (f.reflect.name);var props = f.reflect.properties;var array = [];for (var i = 0; i < props.length; i++)try {array.push (props[i].name + ": " + f[props[i].name])} catch (_){} array.sort ();$.writeln (array.join ("\r"));}function util_inspect_methods (m) {var props = m.reflect.methods.sort(); $.writeln ("\rMethods");for (var i = 0; i < props.length; i++)$.writeln (props[i].name);}// maps a value from one range to another//~ found here//~ http://stackoverflow.com/questions/6984763/map-one-range-of-values-to-another-in-vbscript//~ y = ((x - a1)/(a2 - a1)) * (b2 - b1) + b1function util_map_value(value,value_left,value_right,result_left,result_right){var source_left = value_left;// a1var source_right = value_right;//a2var target_left = result_left;//b1var tagret_right = result_right;//b2var source = value;//xvar target = null;//ytarget = ((source - source_left)/(source_right - source_left)) * (tagret_right - target_left) + target_left;return target;}