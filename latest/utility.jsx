function util_calc_timespan_in_days(strt,nd){//Set the two dates//~ nd=new Date()//~ var christmas=new Date(today.getFullYear(), 11, 25) //Month is 0-11 in JavaScript//~ if (today.getMonth()==11 && today.getDate()>25) //if Christmas has passed already//~ christmas.setFullYear(christmas.getFullYear()+1) //calculate next year's Christmas//Set 1 day in millisecondsvar one_day=1000*60*60*24;//Calculate difference btw the two dates, and convert to days//~ $.write(Math.ceil((strt.getTime()-nd.getTime())/(one_day)) + " days left until Christmas!");var days = Math.abs(Math.ceil((strt.getTime()-nd.getTime())/(one_day)));return days;}function util_alertProjectList(){	var txt = "";for(var i = 0; i < meta.db.projects.length; i++){	var p = meta.db.projects[i];	txt = txt + "id: "+p.id+ " title: "+p.title + " time: "+ p.datetimeStart+"\n";//~	 if(p.id == 1362 ){//~	 prjcts.push(p); //sel + p.toSource () + "\n";//~	 }//~	 if( p.id == 1173 ){//~	 p2 = p; //sel = sel + p.toSource () + "\n";//~	 }//~	 if( p.id == 1754){//~	 p3 = p; //sel = sel + p.toSource () + "\n";//~	 } 	}		   //~ alert(dt);alert(txt);		}function util_set_tint(fn){    // the regexp patterns to sort out files	// that cant be placed like images in indesign	// use JSON to keep it tidy	 var tint = false ;	 var flsList = new Array();//~	  flsList.push({"pattern":"\\.pdf","file":"pdf.jpg"});	 flsList.push({"pattern":"\\.mov","file":"mov.jpg","type":"mov"});	 flsList.push({"pattern":"\\.zip","file":"zip.jpg","type":"zip"});	 flsList.push({"pattern":"\\.rtf","file":"rtf.jpg","type":"rtf"});	 flsList.push({"pattern":"\\.dmg","file":"dmg.jpg","type":"dmg"});			 for(var b = 0; b < flsList.length;b++){			var reg = new RegExp(flsList[b].pattern);			if(fn.match(reg)){//~ 				fn = flsList[b].file;             tint = true;                 break;                }else{             tint = false;                    }	   			}					return tint;    }function util_setFileType(fn){	// the regexp patterns to sort out files	// that cant be placed like images in indesign	// use JSON to keep it tidy	 var type = null;	 var flsList = new Array();//~	  flsList.push({"pattern":"\\.pdf","file":"pdf.jpg"});	 flsList.push({"pattern":"\\.mov","file":"mov.jpg","type":"mov"});	 flsList.push({"pattern":"\\.zip","file":"zip.jpg","type":"zip"});	 flsList.push({"pattern":"\\.rtf","file":"rtf.jpg","type":"rtf"});	 flsList.push({"pattern":"\\.dmg","file":"dmg.jpg","type":"dmg"});			 for(var b = 0; b < flsList.length;b++){			var reg = new RegExp(flsList[b].pattern);			if(fn.match(reg)){//~ 				fn = flsList[b].file;             type = flsList[b].type                 break;                }else{             type = "img";                    }	   			}					return type;	}function util_checkFileType(fn){	// the regexp patterns to sort out files	// that cant be placed like images in indesign	// use JSON to keep it tidy	 	 var flsList = new Array();//~	  flsList.push({"pattern":"\\.pdf","file":"pdf.jpg"});	 flsList.push({"pattern":"\\.mov","file":"mov.jpg"});	 flsList.push({"pattern":"\\.zip","file":"zip.jpg"});	 flsList.push({"pattern":"\\.rtf","file":"rtf.jpg"});	 flsList.push({"pattern":"\\.dmg","file":"dmg.jpg"});			 for(var b = 0; b < flsList.length;b++){			var reg = new RegExp(flsList[b].pattern);			if(fn.match(reg)){				fn = flsList[b].file;				}			}                // replace the pngs with jpg	var pt = "\\.png";    var r = new RegExp(pt);    if(fn.match(r)){        var newName = fn.substr(0,fn.length - 4) + ".jpg";//~         alert(newName);        fn = newName;		}    	var pt2 = "\\.pdf";    var r2 = new RegExp(pt2);    if(fn.match(r2)){        var newName = fn.substr(0,fn.length - 4) + ".jpg";//~         alert(newName);        fn = newName;		}    	return fn;	}// this function sorts by time// found here// http://stackoverflow.com/questions/3859239/sort-json-by-datefunction util_custom_sort(a, b) {	return new Date(util_iso_to_datim(a.datetimeStart)).getTime() - 	new Date(util_iso_to_datim(b.datetimeStart)).getTime();}// found here// http://www.topsoft.at/pstrainer/pstrainer.phpfunction util_iso_to_datim(iso) {var d=null;var len=iso.length;	if(len>=19) {		var hh = parseInt(iso.substr(11,2),10);		var mi = parseInt(iso.substr(14,2),10);		var ss = parseInt(iso.substr(17,2),10);		}else {			var hh=0;			var mi=0;			var ss=0;			}		if(len>=10) {		var yy = parseInt(iso.substr(0,4),10);		var mo = parseInt(iso.substr(5,2),10)-1;		var dd = parseInt(iso.substr(8,2),10);		d = new Date(yy,mo,dd,hh,mi,ss);		}else{			d=new Date();    }return d;}function util_checkhighlite(id){		var bool = false;	for(var i = 0; i < meta.highlite.length; i++){				if(id == meta.highlite[i].id && id != 0){			bool = true;			break			}				}	return bool;	}function styles_builder(doc){var objSt1  = doc.objectStyles.add();objSt1.properties = {		name:"imagesBlend",		strokeWeight: 0,		strokeColor:doc.swatches.item(3),		strokeTint: 23,		transparencySettings:{				blendingSettings:{					opacity:100					}				}		};var objSt3  = doc.objectStyles.add();objSt3.properties = {		name:"overlay",		strokeWeight: 5,        strokeAlignment:StrokeAlignment.CENTER_ALIGNMENT,		  transparencySettings:{				blendingSettings:{					blendMode: BlendMode.COLOR					}				}		};	var objSt4  = doc.objectStyles.add();objSt4.properties = {		name:"image_id",		strokeWeight: 0		};var oStyles = new Array();for(var c = 0; c  < meta.highlite.length;c++){	oStyles.push({"name":"images","id":meta.highlite[c].name});		}					for(var o = 0; o < oStyles.length;o++){		var objSt  = doc.objectStyles.add();		objSt.properties = {			name:oStyles[o].name + " " + oStyles[o].id,			strokeWeight: 0,			fillColor:doc.swatches.item(2),			strokeColor:doc.swatches.item(oStyles[o].id+""),			strokeTint: 50		};	}	var cStyles = {	"styles":[ 			{"name":"h1" ,"font":"DejaVu Serif	Book","factor":1.7},			{"name":"h2" ,"font":"DejaVu Serif	Book","factor":1.4},			{"name":"id" ,"font":"DejaVu Serif	Book","factor":1.2},			{"name":"body" ,"font":"DejaVu Serif	Book","factor":1},			{"name":"whitenoise" ,"font":"DejaVu Sans Mono	Book","factor":0.8},			{"name":"image ul" ,"font":"DejaVu Serif	Book","factor":0.6} ],			"base":10 };var vals = new Array();	  vals.push({"id":0,"fll":50});for(var v = 0; v < meta.db.projects.length;v++){		var fll = 50;	if(util_checkhighlite(meta.db.projects[v].id)){		fll =100;   		}else{	   fll = 50;	   }		  vals.push({"id":meta.db.projects[v].id,"fll":fll});		}// now make a double loop // for creating the chracter styles for(var s = 0; s < cStyles.styles.length;s++){ 	for(var v = 0; v < vals.length;v++){		var charStyle = doc.characterStyles.add({				name:cStyles.styles[s].name + " "+vals[v].id				});						if(v != 0){				charStyle.basedOn = doc.characterStyles.item(				cStyles.styles[s].name +" "+vals[0].id);				}//~ 			var base = 0;			if(cStyles.styles[s].name.match("image ul")){//~ 			base = 9;			                if(vals[v].fll == 100)vals[v].fll = 50;             charStyle.baselineShift = 1;			}else{//~ 			base = cStyles.base;								}			charStyle.properties = {				appliedFont : cStyles.styles[s].font,				pointSize: cStyles.base * cStyles.styles[s].factor,				fillTint: vals[v].fll				};			if(util_checkhighlite(vals[v].id)!=true){               if(cStyles.styles[s].name.match("h1") || cStyles.styles[s].name.match("h2")||cStyles.styles[s].name.match("body")){                   charStyle.pointSize = 10;                   }		}			if(cStyles.styles[s].name.match("id")){				charStyle.fillColor = doc.swatches.item(vals[v].id+"");				}			if(cStyles.styles[s].name.match("body")){				charStyle.leading = 12;				}                        		}// close v loop }// close s loop						//~	 var idStyles = new Array();//~	 for(var p = 0; p < meta.db.projects.length; p++){//~		try{ var cst = doc.characterStyles.add({name:"id " +meta.db.projects[p].id});//~		 cst.basedOn = doc.characterStyles.item("h2");//~		 cst.fillColor = doc.swatches.item(meta.db.projects[p].id+"");//~		 }catch(e){alert("in here");}//~		 //~		 }		var parBody = doc.paragraphStyles.add({name:"body"});//~ 	parBody.alignToBaseline = true;    	var parBody = doc.paragraphStyles.add({name:"head"});	parBody.properties = {pointSize:42,appliedFont:"DejaVu Serif	Bold",fillTint:42};    	}function doc_build(doc){	doc.layers.item(0).name = "content";		doc.layers.add({name:"highlite"});		// set some parametersdoc.viewPreferences.properties = {	horizontalMeasurementUnits: MeasurementUnits.MILLIMETERS,	verticalMeasurementUnits:MeasurementUnits.MILLIMETERS	};		doc.documentPreferences.properties = {		pageWidth : meta.pw,		pageHeight : meta.ph,		facingPages:false	};doc.gridPreferences.properties = {	 baselineStart : meta.top		}	// doc.gridPreferences.baselineDivision = "11pt";	var msp1 = doc.masterSpreads.item(0).pages.item(0);// edit the masterspreads	msp1.marginPreferences.properties = {		right:meta.right,		top:meta.top,		left:meta.left,		bottom:meta.bottom,		 columnGutter:meta.gutter,		 columnCount:meta.textColumnCount	};  var msp2 = doc.masterSpreads.item(0).pages.item(1);//edit the other masterspred	msp2.marginPreferences.properties = {	  right:meta.right,		top:meta.top,		left:meta.left,		bottom:meta.bottom,		 columnGutter:meta.gutter,		 columnCount:meta.textColumnCount	};  	}// end make doc	// by dave saundersfunction colors_convertToCMYK(color) {    color.space = ColorSpace.cmyk;var vals = color.colorValue;	for (var j = vals.length - 1; j >= 0; j--) {        vals[j] = Math.round(vals[j]);		}    color.colorValue = vals;}function colors_builder(d){	    // make the black for project 0	for(var i = 0; i < 1; i++){		var theColor = color_add(d,""+ meta.highlite[i].name, ColorModel.PROCESS, meta.highlite[i].col);		colors_convertToCMYK(theColor);//~         alert("once");		}      //~         var c = 0;//~         var m = 0;//~         var y = 0;//~         var k = 0;	for(var j = meta.db.projects.length -1; j >=0 ; j--){                        var topdown = ((100/(meta.db.projects.length -1)) *j);        var downtop =  100 - ((100/(meta.db.projects.length -1)) *j);                if(meta.DEBUG)$.writeln ("td: " + topdown+"  || dt: " + downtop);                 var s = 66;    var l = 55;        var hue = (360/(meta.db.projects.length +1)) *j;//~       switch(j%2){//~             case 0://~             hue = hue + 180;//~             break;//~             case 1://~             hue = hue + 360;//~             break;//~             case 2://~             hue = hue + 90;//~             break;//~             case 3://~             hue = hue + 270;//~             break;//~             }    var rgb = color_hsl2rgb(hue, s, l);    if(meta.DEBUG)alert(hue + " " +rgb.r+" "+rgb.g+ " "+rgb.b);//~ 	var r = 255 - Math.abs(val -j)/amplitude ;//~ 	var g = 255 -((Math.abs(val-j))* (255/ amplitude));//~ 	var b =  255//;j*(255.0/(meta.db.projects.length - 1));    try{		//~         var colCMYK  = color_add(d,""+ meta.db.projects[j].id, ColorModel.PROCESS, [c,m,y,k]);        var colRGB  = color_add(d,""+ meta.db.projects[j].id, ColorModel.PROCESS, [rgb.r,rgb.g,rgb.b]);		   colors_convertToCMYK(colRGB );		}catch(e){            if(meta.DEBUG){				alert(					 // use the error					 // we already made the colors for the projects					 // so if we try to make anther color with the same name we get an error					 meta.db.projects[j].id + " already exists\n" 					 + "its ok i know about it\n" + e);			}		}	}	}// found on http://bit.ly/h5EobK indisnip.wordpress.com ->// how to apply:// add CMYK color//myColorAdd(app.activeDocument, "My Custom Color", ColorModel.PROCESS, [80,50,30,10]);// add RGB color//myColorAdd(app.activeDocument, "My Custom Color", ColorModel.PROCESS, [33,66,99]);// add HEX color//myColorAdd(app.activeDocument, "My Custom Color", ColorModel.PROCESS, "ABCDEF");// add color directly// add CMYK color to document// and asign it to selected object//app.selection[0].fillColor = myColorAdd(app.activeDocument, "My Custom Color", ColorModel.PROCESS, [80,50,30,10]);function color_add(myDocument, myColorName, myColorModel, myColorValue){	if(myColorValue instanceof Array == false){		myColorValue = [(parseInt(myColorValue, 16) >> 16 ) & 0xff, (parseInt(myColorValue, 16) >> 8 ) & 0xff, parseInt(myColorValue, 16 ) & 0xff ];		myColorSpace = ColorSpace.RGB;	}else{		if(myColorValue.length == 3)		  myColorSpace = ColorSpace.RGB;		else		  myColorSpace = ColorSpace.CMYK;	}	try{		myColor = myDocument.colors.item(myColorName);		myName = myColor.name;	}	catch (myError){		myColor = myDocument.colors.add();		myColor.properties = {name:myColorName, model:myColorModel, space:myColorSpace ,colorValue:myColorValue};	}	return myColor;}// color converiosn found here// http://www.codingforums.com/showthread.php?t=11156function color_hsl2rgb(h, s, l) {	var m1, m2, hue;	var r, g, b	s /=100;	l /= 100;	if (s == 0)		r = g = b = (l * 255);	else {		if (l <= 0.5)			m2 = l * (s + 1);		else			m2 = l + s - l * s;		m1 = l * 2 - m2;		hue = h / 360;		r = color_HueToRgb(m1, m2, hue + 1/3);		g = color_HueToRgb(m1, m2, hue);		b = color_HueToRgb(m1, m2, hue - 1/3);	}	return {r: r, g: g, b: b};}function color_HueToRgb(m1, m2, hue) {	var v;	if (hue < 0)		hue += 1;	else if (hue > 1)		hue -= 1;	if (6 * hue < 1)		v = m1 + (m2 - m1) * hue * 6;	else if (2 * hue < 1)		v = m2;	else if (3 * hue < 2)		v = m1 + (m2 - m1) * (2/3 - hue) * 6;	else		v = m1;	return 255 * v;}