// connect_projects.jsx// this is an adition to the allIncomProjects.jsx// it connects the projects with the text// maybee i will move it to the other script - // but a break within the scripts is also good// gives some room for tiny manual tweaks// Copyright (C) 2012 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses/#include "db.json"#include "utility.jsx"#include "db_utils.jsx"var meta = new Object();	meta.db = data;// this comes from the included db.json	meta.highlite = [	{"id":1173,"name":"1173","col":[153,51,255]},	{"id":1362,"name":"1362","col":[102,153,255]},	{"id":1754,"name":"1754","col":[51,204,204]}	];    meta.coordInText = null;    meta.highliteOnly = false;    meta.DEBUG = false;    db_sort_by_starttime();    db_remove_firstelement();// removes old junk    meta.pw =null;    meta.ph = null;    meta.x1coords = new Array();//~         meta.x1coords.push(0);    main();function main(){var d = app.activeDocument;doc_modify(d);var p = d.pages.item(0);//~ alert(p.groups.length);meta.coordInText = text_find_ids(d);var bnds = get_masterframeBounds(p);var lines = new Array();//~ var target = p.ovals.add({geometricBounds:[0,0,10,10]}); for(var  i = p.groups.length -1; i >=0 ;i--){    var grp = p.groups.item(i);    var id =  grp.label;    var list = null;if(meta.highliteOnly ){        list = meta.highlite;        }else{        list = meta.db.projects;        }        var offset = 5;    for(var j = list.length - 1; j >= 0;j--){                          if(id.match("projid "+ list[j].id) ){                     var coords = get_coordByID(list[j].id);                var w = grp.geometricBounds[3] - grp.geometricBounds[1];                var h = grp.geometricBounds[2] - grp.geometricBounds[0];                var x1 = grp.geometricBounds[1] + (w/2);                var y1 = grp.geometricBounds[0] + (h/2);                var x2 = coords[0] - 2;                var y2 = coords[1] - 2;                var yc_down = bnds[0]  - (offset);                var yc_up = bnds[0] - offset*7;                var gl = draw_line (p, x1, y1, x2, y2,yc_up,yc_down,w);                gl.strokeColor = d.swatches.item(list[j].id+"");                gl.strokeWeight = 1;                gl.itemLayer = "lines";                shift_lines_x_p2_p3(p,gl);                shift_lines_y_p3_p4(p,gl);                shift_lines_x_p4_p5(p,gl);                lines.push(gl);// collect them for further reference                }        }        }return 0;}function shiftLines(p, lines){        for(var i = lines.length -1; i >= 0 ; i-- ){        var x = 0;        var y = 0;        var gl = lines[i];             for(var j = p.graphicLines.length-1; j >=0 ;j--){                       var glCtrl = p.graphicLines.item(j);                                    for(var k = gl.paths[0].pathPoints.length -2; k >=0 ;k--){                    if (i != j){                    if(gl.paths[0].pathPoints[k].anchor[0] == glCtrl.paths[0].pathPoints[k].anchor[0]){                        x = gl.paths[0].pathPoints[k].anchor[0] - 1;                         }else{                        x = gl.paths[0].pathPoints[k].anchor[0] ;                            }                    if(gl.paths[0].pathPoints[k].anchor[1] == glCtrl.paths[0].pathPoints[k].anchor[1]){                        y = gl.paths[0].pathPoints[k].anchor[1] - 1;                         }else{                        y = gl.paths[0].pathPoints[k].anchor[1] ;                         }                                        gl.paths[0].pathPoints[k].anchor = [x,y];                     }                                    } // loop K            }// loop J                        }// loop i            }// this draws the lines with 4 pathpointsfunction draw_line(p,x1,y1,x4,y5,y3,y4,w){   	var gl = p.graphicLines.add();         var p1 = gl.paths[0].pathPoints[0];    var p2 = gl.paths[0].pathPoints[1];        var p3 = gl.paths[0].pathPoints.add();    var p4 = gl.paths[0].pathPoints.add();    var p5 = gl.paths[0].pathPoints.add();        p1.anchor  = [x1,y1]; //~     p1.rightDirection = [x1,y1 + 100];//~     p1.rightDirection = [x1,y1+200];    var x1Off = x1 - (w /2) ;    var x3 = x1Off ;    p2.anchor = [x1Off,y1];    var anchrOff = 10;//~     $.writeln(anchrOff  );    p2.rightDirection = [x1Off-anchrOff,y1-anchrOff];    //~     p2.leftDirection = [x1Off+anchrOff,y1+anchrOff];    p3.anchor = [x3,y3];//~     draw_line_build_Handles (p2, p3,anchrOff);                p4.anchor = [x4,y3];        var x4anchrOff = 2;    if(x3>x4){     p3.rightDirection = [x3 - anchrOff, y3-anchrOff];    p3.leftDirection = [x3 - anchrOff, y3+anchrOff];          p4.rightDirection = [x4 + x4anchrOff, y3 - anchrOff*3];    p4.leftDirection = [x4 - x4anchrOff, y3 + anchrOff];        }else{         p3.rightDirection = [x3 + anchrOff, y3 - anchrOff];    p3.leftDirection = [x3 + anchrOff, y3 + anchrOff];          p4.rightDirection = [x4 - (x4anchrOff*6), y3 - anchrOff*3];    p4.leftDirection = [x4 + x4anchrOff, y3 + anchrOff];//~         x4 = x4 - 5;            }    //~     draw_line_build_Handles(p3,p4,anchrOff);    p5.anchor = [x4,y5];    //~     draw_line_build_Handles (p4, p5, anchrOff);//~     p5.rightDirection = [x4 - anchrOff,y5-anchrOff];    p5.leftDirection = [x4 - anchrOff,y5 - anchrOff];         var p6 = gl.paths[0].pathPoints.add();    p6.anchor = [x4 ,y5];        return gl;    }/* * @deprecated  * */function draw_line_build_Handles(pt_1,pt_2,anchrOff){        if(pt_1.anchor[0] < pt_2.anchor[0]){                pt_1.rightDirection = [pt_1.anchor[0] + anchrOff,pt_1.anchor[1]+anchrOff];    pt_1.leftDirection = [pt_1.anchor[0]-anchrOff,pt_1.anchor[1]-anchrOff];          }else{    pt_1.rightDirection = [pt_1.anchor[0]-anchrOff,pt_1.anchor[1]-anchrOff];    pt_1.leftDirection = [pt_1.anchor[0]+anchrOff,pt_1.anchor[1]+anchrOff];                          }    }function shift_lines_x_p2_p3(p,gl1){    var count = 0;            for(var j = p.graphicLines.length-1; j >=0 ;j--){                var gl2 = p.graphicLines.item(j);                                 if((gl1.paths[0].pathPoints[1].anchor[0] == gl2.paths[0].pathPoints[1].anchor[0]) &&(j != gl1.index)){                   var x1 = gl1.paths[0].pathPoints[1].anchor[0] + 1;                   var y1 = gl1.paths[0].pathPoints[1].anchor[1];                                      var x2 = gl1.paths[0].pathPoints[2].anchor[0] + 1;                   var y2 = gl1.paths[0].pathPoints[2].anchor[1];                                        gl1.paths[0].pathPoints[1].anchor = [x1,y1];                    gl1.paths[0].pathPoints[2].anchor = [x2,y2];                    j = 0;                    }            }            }function shift_lines_y_p3_p4(p,gl1){    var count = 0;            for(var j = 0; j < p.graphicLines.length;j++){                var gl2 = p.graphicLines.item(j);                                 if((gl1.paths[0].pathPoints[2].anchor[1] == gl2.paths[0].pathPoints[2].anchor[1]) &&(j != gl1.index)){                   var x1 = gl1.paths[0].pathPoints[2].anchor[0] ;                   var y1 = gl1.paths[0].pathPoints[2].anchor[1] + 1;                                      var x2 = gl1.paths[0].pathPoints[3].anchor[0] ;                   var y2 = gl1.paths[0].pathPoints[3].anchor[1] +1;                                        gl1.paths[0].pathPoints[2].anchor = [x1,y1];                    gl1.paths[0].pathPoints[3].anchor = [x2,y2];                    j = 0;                    }            }            }function shift_lines_x_p4_p5(p,gl1){    var count = 0;            for(var j = p.graphicLines.length-1; j >=0 ;j--){                var gl2 = p.graphicLines.item(j);                                 if((gl1.paths[0].pathPoints[3].anchor[0] == gl2.paths[0].pathPoints[3].anchor[0]) &&(j != gl1.index)){                   var x1 = gl1.paths[0].pathPoints[3].anchor[0] - 1;                   var y1 = gl1.paths[0].pathPoints[3].anchor[1];                                      var x2 = gl1.paths[0].pathPoints[4].anchor[0] - 1;                   var y2 = gl1.paths[0].pathPoints[4].anchor[1];                                        gl1.paths[0].pathPoints[3].anchor = [x1,y1];                    gl1.paths[0].pathPoints[4].anchor = [x2,y2];                    j = 0;                    }            }            }function draw_line_withBounds(c1, c2){    //~     var c1 = app.selection[0]; //~ 	var c2 = app.selection[1]; 	 	var gb = c1.geometricBounds; 	var r1 = (gb[3]-gb[1])/2; 	var x1 = gb[1]+r1; 	var y1 = gb[0]+r1; 	 	gb = c2.geometricBounds; 	var r2 = (gb[3]-gb[1])/2; 	 	var x2 = gb[1]+r2; 	var y2 = gb[0]+r2;  	var gl = c1.parent.graphicLines.add();     var p1 = gl.paths[0].pathPoints[0];    var p2 = gl.paths[0].pathPoints[1];          p1.anchor  = [x1,y1]; //~     p1.rightDirection = [x1,y1 + 100];//~     p1.rightDirection = [x1,y1 - 100];    p2.anchor = [x2,y2]; //~         p1.rightDirection = [x2,y2 + 100];//~     p1.rightDirection = [x2,y2 - 100];        }function doc_modify(doc){	try{    var l = doc.layers.add({name:"lines"});    l.move(LocationOptions.AT_END);    }catch(e){           if(meta.DEBUG) alert("layer lines already exists\n" + e);        }        meta.pw = doc.documentPreferences.pageWidth ;    meta.ph = doc.documentPreferences.pageHeight ;    }function get_masterframeBounds(page){var bounds = null;for(var i = 0; i < page.textFrames.length; i++){            if(page.textFrames[i].label.match("masterframe")){                                bounds = page.textFrames[i].geometricBounds;                }                }    return bounds;        }function text_find_ids(doc){   var fTPref  = app.findTextPreferences;    var cTPref = app.changeTextPreferences;	var result = new Array();	text_emptyFC();        var list = null;    if(meta.highliteOnly ){        list = meta.highlite;        }else{        list = meta.db.projects;        }        	// now loop thru the object to get all the greps	for(var j = 0;j < list.length;j++){        fTPref.findWhat = "i";        fTPref.appliedCharacterStyle = "id "+list[j].id;//~         cTPref.leading = 16;//~         if(util_checkhighlite (list[j].id)){        var res = doc.findText();//~         alert(res.length);//~ x: app.selection[0].horizontalOffset//~ y: app.selection[0].baseline        //~         alert( "x: " +  res[0].horizontalOffset +" y: "+ res[0].baseline);        result.push({"x":res[0].horizontalOffset,"y":res[0].baseline, "id":list[j].id});//~         alert(result.toSource());//~         }//~         alert(res);        text_emptyFC();	}	text_emptyFC();                return result;    }function get_coordByID(id){    for(var i = 0; i < meta.coordInText.length; i++){        if(id == meta.coordInText[i].id){        return [meta.coordInText[i].x,meta.coordInText[i].y];        }    }}function text_set_FindChange_opt(){		text_emptyFC();	//Set the find options.	app.findChangeGrepOptions.includeFootnotes = true;	app.findChangeGrepOptions.includeHiddenLayers = false;	app.findChangeGrepOptions.includeLockedLayersForFind = false;	app.findChangeGrepOptions.includeLockedStoriesForFind = true;	app.findChangeGrepOptions.includeMasterPages = true;	}function text_emptyFC(){	//Clear the find/change grep preferences.	app.findGrepPreferences = NothingEnum.nothing;	app.changeGrepPreferences = NothingEnum.nothing;		//Clear the find/change text preferences.	app.findTextPreferences = NothingEnum.nothing;	app.changeTextPreferences = NothingEnum.nothing;}//~ based on this//~ found here://~ http://www.hilfdirselbst.ch/gforum/gforum.cgi?post=486547#486547//~ if (app.selection.length == 2) //~ 	main(); //~  //~ function main \( \)  { //~ 	var c1 = app.selection[0]; //~ 	var c2 = app.selection[1]; //~ 	 //~ 	var gb = c1.geometricBounds; //~ 	var r1 = (gb[3]-gb[1])/2; //~ 	var x1 = gb[1]+r1; //~ 	var y1 = gb[0]+r1; //~ 	 //~ 	gb = c2.geometricBounds; //~ 	var r2 = (gb[3]-gb[1])/2; //~ 	 //~ 	var x2 = gb[1]+r2; //~ 	var y2 = gb[0]+r2; //~  //~ 	var gl = c1.parent.graphicLines.add(); //~ 	gl.paths[0].pathPoints[0].anchor  = [x1,y1]; //~ 	gl.paths[0].pathPoints[1].anchor = [x2,y2]; //~  //~ 	var alpha = Math.atan2 (y2-y1, x2-x1); //~ 	var dx1 = Math.cos( alpha ) * r1; //~ 	var dy1 = Math.sin( alpha ) * r1; //~ 	var dx2 = Math.cos( alpha ) * r2; //~ 	var dy2 = Math.sin( alpha ) * r2; //~ 	var x11 = x1 + dx1; //~ 	var y11 = y1 + dy1; //~ 	var x21 = x2 - dx2; //~ 	var y21 = y2 - dy2; //~ 	 //~ 	var gl = c1.parent.graphicLines.add(); //~ 	gl.paths[0].pathPoints[0].anchor  = [x11,y11]; //~ 	gl.paths[0].pathPoints[1].anchor = [x21,y21]; //~ } 