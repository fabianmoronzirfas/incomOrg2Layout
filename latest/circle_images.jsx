// circle_images.jsx// this is an adition to the allIncomProjects.jsx// it connects the projects with the text// maybee i will move it to the other script - // but a break within the scripts is also good// gives some room for tiny manual tweaks// Copyright (C) 2012 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses/#include "db.json"#include "utility.jsx"#include "db_utils.jsx"#include "colors.jsx"#include "document.jsx"#include "styles.jsx"#include "weblinks.jsx"var meta = new Object();	meta.db = data;// this comes from the included db.json    meta.highlite = [	{"id":0, "name":"0","col":[255,255,255]},	{"id":1173,"name":"1173","col":[153,51,255]},	{"id":1362,"name":"1362","col":[102,153,255]},	{"id":1754,"name":"1754","col":[51,204,204]}	];	meta.pw = 841; // this will hold the page width	meta.ph = 841; // this will hold the page width	meta.flsFolder = null;// the folder for the images//~	 meta.allImages = null;// the images	meta.imgW = 25; // the image sizes	meta.imgH = 25;   //~	 meta.step = 1; // the step for selecting the images		// these are the margins	meta.left = 50;	meta.right = 50;	meta.top = 50;	meta.bottom = 50;//~ 	meta.textColumnCount = 20;	// this will be filled with data from the db.json	// sorted by startdate	meta.sortedFiles = null;  //~	 meta.Masterframe = null;	db_sort_by_starttime();	db_remove_firstelement();// removes old junk	db_build_imageList();    // calculate the gutter depending on how many images per column    meta.gutter = ((meta.pw - (meta.left + meta.right)) - (meta.imgW*80)) / 79;main();function main(){        // this is to group all the stuff at the end	var circle = new Array();var d = app.documents.add(); //build a basic document    colors_builder(d);        doc_build (d);// build the document    styles_builder(d);//build textstyles    image_loadFiles();// opens a prompt and lets the user choose a foldervar p = d.pages.item(0);// finally - get the first page    p.appliedMaster = d.masterSpreads.item(0);// apply the masterspread var prf = d.documentPreferences;var r = prf.pageWidth;    // the height of the rowsvar pt  = 25;        // the starting point var arclength = 0;    // the width of the images    // to make it easier we work with quadratic imagesvar w = pt;     for (var i = 0; i < meta.sortedFiles.length; i ++ ) {    // The rectangle and its width        var x1 = (prf.pageWidth / 2)  -(w/2);    var y1 = (prf.pageHeight / 2) -(w/2);    var x2 = x1 +w;    var y2 = y1 +w;        // create the rectangle in the center of the page    var cr = p.ovals.add({geometricBounds:[y1,x1,y2,x2]});        cr.strokeWeight = 5;        cr.strokeColor = d.swatches.item(2);try{              cr.place(meta.flsFolder.fsName + "/" + 							util_checkFileType(							meta.sortedFiles[i].filename							));        // fit the image to the frame//~         cr.fit(FitOptions.CONTENT_TO_FRAME);    }catch(e){//~       if(meta.DEBUG) alert( meta.sortedFiles[s].filename + "\n" + e);				 // so got an error place the error imgage instead				 cr.place(				meta.flsFolder.fsName + "/" +"error.jpg"				);                }         image_tint_and_fit (i, cr);    // Each box is centered so we move the width    arclength += w*2;        // Angle in radians is the arclength divided by the radius    // Starting on the left side of the circle by adding PI    var theta = Math.PI + arclength / r;        // Polar to Cartesian conversion allows us to find the point along the curve.     var trnsMat =  app.transformationMatrices.add({horizontalTranslation:r * Math.cos(theta), verticalTranslation:r * Math.sin(theta)});	cr.transform(CoordinateSpaces.pasteboardCoordinates, AnchorPoint.centerAnchor, trnsMat);         // Rotate the box (rotation is offset by 90 degrees)            // calc the rotation of the single image.        // this is in radians        var rot = (theta + (Math.PI/2));             // turn radians to degrees        var degrees = rot * (180/Math.PI);             var rotMat = app.transformationMatrices.add();rotMat = rotMat.rotateMatrix(degrees *-1);cr.transform(CoordinateSpaces.PASTEBOARD_COORDINATES, AnchorPoint.centerAnchor, rotMat);       // Move  again        arclength += w;        // calc the lenght of the circle    var u = 2 * Math.PI * r;        // if the arclength is longer than the length    // reduce the radius and set arclength to 0 again    if(arclength > u - w ){      r = r - pt*2;      arclength = 0;            // if it gets to small stop the loop      if(r < pt*2){        r = pt;        break;      } // end of height check    } // end of arclength check        // push to array	circle.push(cr);    make_button(cr, i);//~ var bttn = p.buttons.add({geometricBounds:cr.geometricBounds});//~ var behave = bttn.gotoURLBehaviors.add();//~     behave.enableBehavior = true;//~     behave.url = meta.sortedFiles[i].preview;//~     //~ var st1 = bttn.states.add();//~ var st1ro = st1.ovals.add({//~     geometricBounds:cr.geometricBounds,//~     strokeWeight:0,//~     fillColor:d.swatches.item(meta.sortedFiles[i].id + "")});//~    //~  //~     //~ var st2 = bttn.states.add();//~ var st2ro = st2.ovals.add({//~     geometricBounds:cr.geometricBounds, //~     strokeWeight:0,//~     strokeColor:d.swatches.item(meta.sortedFiles[i].id + ""),//~     fillColor:d.swatches.item(meta.sortedFiles[i].id + "")//~     });   }// add to a groupvar grp = p.groups.add(circle); text_build_headline (d, p);    }function image_tint_and_fit(s,oval){try{    if(meta.sortedFiles[s].tint == true){        oval.images.item(0).fillColor = meta.sortedFiles[s].id + "";        }    }catch(e){        if(meta.DEBUG)$.writeln("Error while tintig the image \n"+e);}    oval.fit(FitOptions.FILL_PROPORTIONALLY);// center it    oval.fit(FitOptions.CENTER_CONTENT);// center it			try{// we have to check if the images are printable.// if the effectivePpi is under 280 we rescale the image// warning this gets overritten if we use the fiting laterif(meta.DEBUG) $.writeln(ovals[s].images.item(0).effectivePpi);// if the images are to small to printif(oval.images.item(0).effectivePpi[0] < 280 && util_checkhighlite (meta.sortedFiles[s].id) != true){    oval.images.item(0).horizontalScale = 24;				oval.images.item(0).verticalScale = 24;  	oval.images.item(0).fit(FitOptions.CENTER_CONTENT);// center it again	}}catch(e){ }} // END TINTfunction text_build_headline(doc,page){    var x1 = meta.left;    var y1 = meta.ph - meta.bottom*1.5;    var x2 = meta.pw - meta.right;    var y2 = meta.ph;     var tf = page.textFrames.add({geometricBounds:[y1,x1,y2,x2]});     var dt = new Date();    tf.contents = "6479: Fabian Morón Zirfas\n"+    "build on: " + dt.getFullYear() + "/"+dt.getMonth() + 1 + "/"+dt.getDate() +    "\nIn "+db_get_timespan ()+" days I made " + db_build_stats (doc) +".\n " +    " get the code over there http://fabiantheblind.github.com/incomOrg2Layout/";    tf.paragraphs.everyItem().appliedParagraphStyle = doc.paragraphStyles.item("head");        }function image_loadFiles(){		// define the folder and the filetype          var theFolder = Folder("~/Documents/Dropbox/incom2layoutFilesGrey");//Folder.selectDialog ("Choose the FOLDER to import the images from");      //~	 alert(theFolder);	// if the user cancels the folder dialog	 // cancel the script	if(!theFolder){		return;// this cancels the whole function main \(\)		}	var theFileType = "*.*";// only use tif files could also be jpg	// get all images into an array	var temp = null;	try{	temp = theFolder.getFiles(theFileType);	   	   }catch(e){		   alert("Error with this\n" +e);		   }// end catch      var allImages = temp;	if((allImages == "")||(allImages == null) ){		if(meta.DEBUG)alert("There aare no images");		return;	   	   }	meta.flsFolder = theFolder;// to get them all everywhere	meta.allImages = allImages;	}            