// book.jsx// this should generate a tiny a5 book from all the projekts// needs dumbrunpages by dave saunders// Copyright (C) 2012 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses/#include "db.json"#include "utility.jsx"#include "db_utils.jsx"#include "colors.jsx"#include "document.jsx"#include "styles.jsx"#include "weblinks.jsx"var counter = new Window("palette");counter.prompt = counter.add("statictext",[0,0,300,20]);    counter.show();var meta = new Object();	meta.db = data;// this comes from the included db.json	meta.DEBUG = false; // this is for debugging	// this is for quicker editing 	// in the final render switch in the overlay and the image place	meta.flsFolder = null;// the folder for the images	meta.sortedFiles = null;    meta.addFlsFolder  = null;//~	 meta.Masterframe = null;    counter.prompt.text = "sorting DB";	db_sort_by_starttime();	db_remove_firstelement();// removes old junk            counter.prompt.text = "building image lists";	db_build_imageList();    util_getfilesFolder();    getAdditionalFilesFolder();        meta.sortedFilesbyId = db_files_lists_by_id();            counter.prompt.text = "some stuff ;)";    meta.highlite = util_build_highliteList();	meta.stats = db_build_TextStats(); // look into db_utils.jsx    // now some sizes    meta.imgGutter = 5;    meta.gutter = meta.imgGutter;        meta.left = 12.7;	meta.right = 12.7;	meta.top = 12.7;	meta.bottom = 17;                  // this is DIN A5    meta.pw = 135; // this will hold the page width	meta.ph = 202.5; // this will hold the page width    meta.bookback = 9;          meta.textColumnCount = 8;        meta.imgW = ((meta.pw - (meta.left + meta.right)) - meta.gutter*7) / 8;//25; // the image sizes	meta.imgH = meta.imgW;    counter.prompt.text = "main function start";    main();    counter.close();        // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             function main(){    counter.prompt.text = "main function start";    var d = app.documents.add(); //build a basic document    counter.prompt.text =  "build colors";	    colors_builder(d);    counter.prompt.text =  "build styles";    styles_builder(d); // build some paragrph styles    tweak_textStyles(d);    counter.prompt.text =  "build document";    doc_build (d,true,false);// build the document    counter.prompt.text =  "build master pages and pagina";    build_master_pages (d);    counter.prompt.text =  "get files folder";    	util_getfilesFolder();// opens a prompt and lets the user choose a folder    // now when you use place() write this    // it will give you the file with the folder you need    /*    				meta.flsFolder.fsName + "/" + util_checkFileType(meta.sortedFiles[iter].filename)                *///~     exit();  //~         for(var i  = 0; i <meta.highlite.length;i++){        counter.prompt.text = "in meta higlite id: "+meta.highlite[i].id + " number: " + String(i);        process_one_project(d,meta.highlite[i].id);        }   //~     //~        d.documentPreferences.facingPages = true;//~    //~        counter.prompt.text =  "tahe out html formatting trash";	text_takeOutTheTrash(d); // This removes html formatting        counter.prompt.text =  "grep reformatting text";	text_grepReformatting(d); // this removes some things and adds new paragraphs for the important projects       counter.prompt.text =  "adding paragraphs";   text_FormatParagraphs(d); // add some paragraphs       counter.prompt.text =  "fixing last line issue";    text_fix_last_line (d);// this is some kind of manual tweak        counter.prompt.text =  "building hyperlinks";    find_hyperlinks();// build some hyperlinks for the pdf    counter.prompt.text =  "remove empty textframes";    remove_empty_textframes(d);// from the reformatting stay empty textframes        counter.prompt.text =  "remove empty pages";    remove_empty_pages(d); // now the empty pages            counter.prompt.text =  "moving images to lefthand side";    imagePage_to_leftHandPage(d);// we want the images allways be on a left hand sidevar p = d.pages.item(0);// finally - get the first page	p.appliedMaster = d.masterSpreads.item("B-interlude");// apply the masterspread  //~         counter.prompt.text =  "build front page";    place_text_file(d,p,"intro.txt");    //~     fix_firstpage(d,p);        counter.prompt.text =  "build impressum";    var impressum = d.pages.add(LocationOptions.AFTER,p);    var index = d.pages.add(LocationOptions.AFTER,impressum);        impressum.appliedMaster = d.masterSpreads.item("B-interlude");// apply the masterspread      index.appliedMaster = d.masterSpreads.item("B-interlude");// apply the masterspread          place_text_file(d,impressum,"impressum.txt");        counter.prompt.text =  "adding interlude";    add_interlude(d);// add some images in the middle        counter.prompt.text =  "adding index";//~     build_index (d, index);    find_hyperlinks();// build some hyperlinks for the pdf            meta.bookback = (9/124) * 132; // i know it will have 132 pages ;)        counter.prompt.text =  "build cover";    build_cover();return 0;    }// end of mainfunction fix_firstpage(d,p){        for(var i = 0; i < p.textFrames.length;i++){        p.textFrames.item(i).move(undefined,[-meta.pw,0]);        }        }// this makes the masterpages with the paginafunction build_master_pages(doc){      var msp1 = doc.masterSpreads.item(0).pages.item(0);// edit the masterspreads        var y1 = (meta.ph - (meta.bottom)) + meta.gutter;    var x1 =  meta.left;    var y2 = y1 + 13;    var x2 = meta.pw - meta.right;    var bounds = [y1,x1,y2,x2];//~     alert(bounds);    var tf1 = msp1.textFrames.add({geometricBounds:bounds});    tf1.contents = SpecialCharacters.autoPageNumber;    tf1.paragraphs.everyItem().appliedParagraphStyle = "pagina";                var msp2 = doc.masterSpreads.item(0).pages.item(1);//edit the other masterspread         x1 =  x1 + meta.pw;    x2 = x2 + meta.pw;    bounds = [y1,x1,y2,x2];        var tf2 = msp2.textFrames.add({geometricBounds:bounds});    tf2.contents = SpecialCharacters.autoPageNumber;    tf2.paragraphs.everyItem().appliedParagraphStyle = "pagina";   var headBounds1 = [meta.top - 8,  meta.left, meta.top,(meta.pw - meta.right)];   var headBounds2 = [meta.top - 8, meta.pw + meta.left, meta.top,(meta.pw - meta.right)+meta.pw];for (var i in meta.db.projects){           var pr =   meta.db.projects[i];      var id = meta.db.projects[i].id;      var ms  = doc.masterSpreads.add({baseName:""+String(id),name:""+String(id),namePrefix:"id"});      var ms_p1 = ms.pages.item(0);      var ms_p2 = ms.pages.add();      	ms_p1.marginPreferences.properties = {		right:meta.right,		top:meta.top,		left:meta.left,		bottom:meta.bottom,		 columnGutter:meta.gutter};  	ms_p2.marginPreferences.properties = {		right:meta.right,		top:meta.top,		left:meta.left,		bottom:meta.bottom,		 columnGutter:meta.gutter};        var dt1 = util_iso_to_datim(pr.datetimeStart);      var dt2 = util_iso_to_datim(pr.datetimeEnd);		var dt = dt1.getFullYear() + "/"+dt1.getMonth() 		+" - " + dt2.getFullYear() + "/"+dt2.getMonth() ;         var head1  = ms_p1.textFrames.add({geometricBounds:headBounds1});   var head2  = ms_p2.textFrames.add({geometricBounds:headBounds2});   var title = ms_p1.textFrames.add({geometricBounds:headBounds1});       title.contents = pr.title;       title.move(undefined,[(meta.left/2)*-1,0]);// relativ move   var pars = title.paragraphs.everyItem();       pars.properties = {pointSize : 7,appliedFont:"DejaVu Serif	Italic"};   var rotMat = app.transformationMatrices.add();       rotMat = rotMat.rotateMatrix(-90);        title.transform(CoordinateSpaces.PASTEBOARD_COORDINATES, AnchorPoint.TOP_LEFT_ANCHOR, rotMat);        title.fit(FitOptions.FRAME_TO_CONTENT);           // this is ithe head on the image page               // add page number spaced by em_dash in german --> geviert        // em_dash in unicode is: \u2003        // have a look here        // http://www.indiscripts.com/tag/specialcharacters               head1.insertionPoints.item(0).contents = SpecialCharacters.autoPageNumber;       text_add_and_format(head1,"\u2003"+"id: "+ id+"\u2003","id","id",pr, id,null);       text_add_and_format(head1,"Zeitraum: " + dt + "","timespan","id",pr, id,null);       head1.paragraphs.everyItem().appliedParagraphStyle = "pghead_left";        // this is the head of the project page       text_add_and_format(head2,"Zeitraum: " + dt + "\u2003","timespan","id",pr, id,null);       text_add_and_format(head2,"id: "+ id+"\u2003","id","id",pr, id,null);       head2.insertionPoints.item(-1).appliedCharacterStyle = doc.characterStyles.item(0);       head2.insertionPoints.item(-1).contents = SpecialCharacters.autoPageNumber;       head2.paragraphs.everyItem().appliedParagraphStyle = "pghead_right";        //~        ms_p1.appliedMaster = doc.masterSpreads.item(0);//~        ms_p2.appliedMaster = doc.masterSpreads.item(0);                    }          var interlude_ms  = doc.masterSpreads.add({baseName:"interlude",name:"interlude",namePrefix:"B"});      var interlude_ms1 = interlude_ms.pages.item(0);      var interlude_ms2 = interlude_ms.pages.add();      // dont need this if the applied master is the masterSpread.item(0)//~       	interlude_ms1.marginPreferences.properties = {//~ 		right:meta.right,//~ 		top:meta.top,//~ 		left:meta.left,//~ 		bottom:meta.bottom,//~ 		 columnGutter:meta.gutter,//~ 	};  //~       	interlude_ms2.marginPreferences.properties = {//~ 		right:meta.right,//~ 		top:meta.top,//~ 		left:meta.left,//~ 		bottom:meta.bottom,//~ 		 columnGutter:meta.gutter,//~ 	};       var tf = interlude_ms1.textFrames.add({geometricBounds:[meta.top,meta.left,meta.top*2,meta.pw - meta.left]});//~       tf.contents = "Aus dem selbem Datensatz erzeugt Grafiken."//~       interlude_ms1.appliedMaster = doc.masterSpreads.item(0);//~       interlude_ms2.appliedMaster = doc.masterSpreads.item(0);                      }function build_index(doc, page){    var list = new Array();        for(var j in meta.db.projects){        var pr = meta.db.projects[j];app.changeTextPreferences = NothingEnum.nothing;  app.findTextPreferences = NothingEnum.nothing;    app.findTextPreferences.appliedCharacterStyle = doc.characterStyles.item("h1 " + meta.db.projects[j].id);    f = doc.findText();    for(var  i = 0; i < f.length;i++) {             list.push( pr.title+ "\u2003id: " + String(pr.id) + "\u2003seite: "+ f[i].parentTextFrames[0].parentPage.name);        }      }//close j reset_activeView (page);      var tfheight = (meta.ph - (meta.bottom + meta.top )) / list.length;        var x1 = meta.pw + meta.left;        var y1 = meta.top;        var x2 = (meta.pw*2) - meta.right;for(var j = 0; j < list.length;j++){            var y2 = y1 + tfheight;        var bnds = [y1,x1,y2,x2];    var frame = page.textFrames.add({geometricBounds:bnds});        frame.contents = list[j];        var ilpar = frame.paragraphs.item(0);                ilpar.hyphenation = false;        ilpar.justification = Justification.LEFT_ALIGN;        ilpar.appliedFont = "DejaVu Serif	Book";    var ptsz = 10;        while(!frame.overflows){                    ilpar.pointSize = ptsz;            ptsz++;            }            while(frame.overflows){             ptsz--;            ilpar.pointSize = ptsz;            }//~         ilpar.fillTint = 100;//100 - (100/pars.length)*j;        frame.fit(FitOptions.FRAME_TO_CONTENT);                y1 = y1 + tfheight;           }    }function place_text_file(doc,page, filename){    reset_activeView (page);    var tf = page.textFrames.add({geometricBounds:getBounds (doc, page)});    tf.place(meta.addFlsFolder.fsName + "/" + filename);    tf.paragraphs.everyItem().appliedParagraphStyle = "body";        var pars =split_paragraphs(tf);    tf.remove();    paragraphsToFrames(page,pars);        }function split_paragraphs(tf){        var pars = new Array();for(var i = 0; i < tf.paragraphs.length; i++){        pars.push(tf.paragraphs.item(i).contents);    }return pars;}function paragraphsToFrames(page, pars ){        var tfheight = (meta.ph - (meta.bottom + meta.top )) / pars.length;//~ if(page.side == PageSideOptions.LEFT_HAND){            var x1 = meta.left;        var y1 = meta.top;        var x2 = meta.pw - meta.right;//~    }//~ }else if(page.side == PageSideOptions.RIGHT_HAND){//~         var x1 = meta.pw + meta.left;//~         var y1 = meta.top;//~         var x2 = ( meta.pw *2) - meta.right;        //~     }for(var j = 0; j < pars.length;j++){            var y2 = y1 + tfheight;        var bnds = [y1,x1,y2,x2];    var frame = page.textFrames.add({geometricBounds:bnds});        frame.contents = pars[j];        var ilpar = frame.paragraphs.item(0);                ilpar.hyphenation = false;        ilpar.justification = Justification.LEFT_ALIGN;        if(j == 0){        ilpar.appliedFont = "DejaVu Serif	Bold Italic";        }else{        ilpar.appliedFont = "DejaVu Serif	Book";                        }    var ptsz = 10;        while(!frame.overflows){                    ilpar.pointSize = ptsz;            ptsz++;            }            while(frame.overflows){             ptsz--;            ilpar.pointSize = ptsz;            }//~         ilpar.fillTint = 66;//;100 - (100/pars.length)*j;        frame.fit(FitOptions.FRAME_TO_CONTENT);                y1 = y1 + tfheight;           }            }function add_interlude(doc){var index = doc.pages.item(doc.pages.middleItem().name);// get the name of the middle page    reset_activeView (index);//~ alert(index.name)// make a number from it and find from there the next page with the label imagesfor(var i = parseInt (index.name); i < doc.pages.length; i++){        if(doc.pages.item(i).label.match("images")){            var pg1 = doc.pages.add(LocationOptions.BEFORE, doc.pages.item(i),{appliedMaster:doc.masterSpreads.item("B-interlude")});    var pg2 = doc.pages.add(LocationOptions.AFTER, pg1,{appliedMaster:doc.masterSpreads.item("B-interlude")});        reset_activeView (pg1);    var rect1 = pg1.rectangles.add({geometricBounds:[0,0,meta.ph,meta.pw]});        rect1.place(meta.addFlsFolder.fsName + "/"+"circle_text.jpg");        rect1.fit(FitOptions.PROPORTIONALLY);        rect1.fit(FitOptions.CENTER_CONTENT);        rect1.strokeWeight = 0;            var rect2 = pg1.rectangles.add({geometricBounds:[0,meta.pw,meta.ph,meta.pw*2]});        rect2.place(meta.addFlsFolder.fsName + "/"+"circle_images.jpg");                rect2.fit(FitOptions.PROPORTIONALLY);        rect2.fit(FitOptions.CENTER_CONTENT);        rect2.strokeWeight = 0;            var pg3 = doc.pages.add(LocationOptions.AFTER, pg2,{appliedMaster:doc.masterSpreads.item("B-interlude")});    var pg4 = doc.pages.add(LocationOptions.AFTER, pg3,{appliedMaster:doc.masterSpreads.item("B-interlude")});    var rect3 = pg3.rectangles.add({geometricBounds:[0,0,meta.ph,meta.pw*2]});        rect3.place(meta.addFlsFolder.fsName + "/"+"allincomprojects.jpg");        rect3.fit(FitOptions.PROPORTIONALLY);        rect3.fit(FitOptions.CENTER_CONTENT);        rect3.strokeWeight = 0;            var pg5 = doc.pages.add(LocationOptions.AFTER, pg4,{appliedMaster:doc.masterSpreads.item("B-interlude")});    var pg6 = doc.pages.add(LocationOptions.AFTER, pg5,{appliedMaster:doc.masterSpreads.item("B-interlude")});    var rect4 = pg5.rectangles.add({geometricBounds:[0,0,meta.ph,meta.pw*2]});        rect4.place(meta.addFlsFolder.fsName + "/"+"index.jpg");        rect4.fit(FitOptions.PROPORTIONALLY);        rect4.fit(FitOptions.CENTER_CONTENT);        rect4.strokeWeight = 0;            stopper (doc, pg1, "break;", false);    stopper (doc, pg6, "continue;", true);       break;        }        }}function stopper(doc,pg,cntnt,after){    if(after == true){    var ilpg1 = doc.pages.add(LocationOptions.AFTER, pg,{appliedMaster:doc.masterSpreads.item("B-interlude")});    }else{   var ilpg1 = doc.pages.add(LocationOptions.BEFORE, pg,{appliedMaster:doc.masterSpreads.item("B-interlude")});                }    var ilpg2 = doc.pages.add(LocationOptions.AFTER, ilpg1,{appliedMaster:doc.masterSpreads.item("B-interlude")});        reset_activeView (ilpg1);    var iltf = ilpg1.textFrames.add({geometricBounds:[0, 0, meta.ph, meta.pw*2]});        iltf.contents = cntnt;    var ilpar = iltf.paragraphs.item(0);        ilpar.hyphenation = false;        ilpar.justification = Justification.CENTER_ALIGN;        ilpar.appliedFont = "DejaVu Serif	Bold";    var ptsz = 100;            while(!iltf.overflows){                    ilpar.pointSize = ptsz;            ptsz++;            }                while(iltf.overflows){             ptsz--;            ilpar.pointSize = ptsz;            }        ilpar.fillTint = 42;        iltf.fit(FitOptions.FRAME_TO_CONTENT);    //~         DistributeOptions.LEFT_EDGES	//~         doc.align(iltf,   DistributeOptions.HORIZONTAL_CENTERS, AlignDistributeBounds.PAGE_BOUNDS);         doc.align(iltf,   DistributeOptions.LEFT_EDGES, AlignDistributeBounds.PAGE_BOUNDS);         doc.align(iltf,   DistributeOptions.VERTICAL_CENTERS, AlignDistributeBounds.PAGE_BOUNDS);      var gb = iltf.geometricBounds;    var bnds = [gb[0],gb[1],gb[2],meta.pw*2];    iltf.geometricBounds = bnds;        }function place_index_image(doc,impressum){        var p1 =  doc.pages.add(LocationOptions.BEFORE,impressum);    var p2 =  doc.pages.add(LocationOptions.AFTER,p1);    reset_activeView (p1);    var rect = p1.rectangles.add({geometricBounds:[0,0,meta.ph, meta.pw*2]});    rect.place(meta.addFlsFolder.fsName + "/"+"index.jpg");    rect.fit(FitOptions.PROPORTIONALLY);    rect.fit(FitOptions.CENTER_CONTENT);    rect.strokeWeight = 0;    }/** * This is just for resetting the view */function reset_activeView(page){         app.activeWindow.activePage = page;              app.activeWindow.zoomPercentage = 50;        }/** * This empty frames that remain from reformatting  */   // found here   // http://forums.adobe.com/message/3281020#3281020function remove_empty_textframes(doc){       var myStories = doc.stories.everyItem().getElements();for (i = myStories.length - 1; i >= 0; i--){       counter.prompt.text = "removing empty textframes";    var myTextFrames = myStories[i].textContainers;        for (j = myTextFrames.length - 1; j >= 0; j--)    {        reset_activeView(myTextFrames[j].parentPage);        if (myTextFrames[j].contents == ""){            myTextFrames[j].remove();        }    }    }    }/** * This removes empty pages */    // now remove empty pages found here    // http://forums.adobe.com/message/2401657#2401657function remove_empty_pages(doc){                  counter.prompt.text = " in remove emtpy pages";    var pag= doc.pages;for(var i=pag.length-1; i>=0; i--){    reset_activeView (pag[i]);    if(pag[i].pageItems.length==0&&pag[i].guides.length==0){                              counter.prompt.text = " page " + String(i) +" is empty >> remove";        pag[i].remove();        }    }    }/** * This processes one project */function process_one_project(doc , id){                                    counter.prompt.text = "processing project" + id;// images on top off projekt           var pr_files = get_files_from_project_byID (id);      if(pr_files != null && pr_files.length > 0){   var y1 = meta.left;   var x1 = meta.top;      var imgpage = doc.pages.add({appliedMaster:doc.masterSpreads.item(0)});//~    var imghead  = imgpage.textFrames.add({geometricBounds:headBounds});        imgpage.appliedMaster = doc.masterSpreads.item("id-"+String(id));           imgpage.label = "images";   count = 0;    for(var i = 0; i < pr_files.length; i ++){                counter.prompt.text = "placing " + pr_files[i].filename;       var y2 = y1 + meta.imgH;       var x2 = x1 + meta.imgW;       var oval = imgpage.ovals.add({geometricBounds:[y1,x1,y2,x2]});       oval.strokeWeight = 2;       oval.strokeColor = id+"";       try{       oval.place(meta.flsFolder.fsName + "/" + util_checkFileType(pr_files[i].filename));        }catch(e){           oval.place(meta.flsFolder.fsName + "/" + "error.jpg");                        }                util_image_tint_and_fit(id,oval);                make_button_with_url(oval,pr_files[i].preview,id);       count++;       x1 = x2 + meta.gutter;       if(count%8 == 0){//~            alert(count%8);           y1 = y2 + meta.gutter/2;           x1 = meta.left;                      }              }          counter.prompt.text = "place text";     var textpage = doc.pages.add({appliedMaster:doc.masterSpreads.item("id-"+String(id))});//~          textpage.appliedMaster = doc.masterSpreads.item("id-"+String(id));         textpage.label = String(id);     var w = meta.pw - (meta.left + meta.right) - meta.gutter*4;     var h = (w/16)*9;      var imgbnds = [meta.top,meta.left + meta.gutter*2,meta.top + h, (meta.left + w) - meta.gutter*2];     var prjimg = textpage.rectangles.add({geometricBounds:imgbnds});     prjimg.strokeWeight = 0;     prjimg.place(meta.flsFolder.fsName + "/" + util_checkFileType(pr_files[1].filename));     prjimg.images.item(0).fillColor = id + "";     prjimg.fit(FitOptions.PROPORTIONALLY);// center it     prjimg.fit(FitOptions.CENTER_CONTENT);// center it     prjimg.label = "projectimage";     doc.align(prjimg,   DistributeOptions.HORIZONTAL_CENTERS, AlignDistributeBounds.PAGE_BOUNDS);      var bnds = [imgbnds[2] + meta.gutter,meta.left,meta.ph - meta.bottom,meta.pw - meta.right];     //~      alert(bnds);   var pr = get_project_by_id (id);     var tf = textpage.textFrames.add({geometricBounds:bnds});     		text_add_and_format(tf,pr.title+"","h1","title",pr, id,null);						try{			text_add_and_format(tf,pr.workspace.title+"","h2","title",pr, id,null);			}catch(e){}				text_add_and_format(tf, pr.text,"body","text",pr, id,null);//~          tf.fit(FitOptions.FRAME_TO_CONTENT);//~          tf.geometricBounds = bnds;              counter.prompt.text = "processing posts";     var nexttextpage = doc.pages.add({appliedMaster:doc.masterSpreads.item("id-"+String(id))});     var nextbnds = [meta.top,meta.left,meta.ph - meta.bottom,meta.pw - meta.right];     var tftxt = nexttextpage.textFrames.add({geometricBounds:nextbnds});    for(var j = 0; j < pr.posts.length;j++){                   counter.prompt.text =  "post ID: "+ pr.posts[j].id;			text_add_and_format(tftxt,"<LF>"+ pr.posts[j].titel,"h2","post title",pr, id ,pr.posts[j].id);			text_add_and_format(tftxt,pr.posts[j].text + "\n","body","post text",pr, id,pr.posts[j].id);       }//~         // now the dumbRunPages by dave saunders               counter.prompt.text = "dumb run pages";    DumbRunPages (doc, tftxt.parentStory, id);        }    counter.prompt.text = "end project: "+ id;  }/** * This moves all the image pages to the left hand side */function imagePage_to_leftHandPage(doc){    for(var i = 0; i < doc.pages.length; i++){        var p = doc.pages.item(i);    reset_activeView (p);    if((p.label.match("images"))){        if(p.side == PageSideOptions.rightHand){//~                     $.writeln("image page named: " + p.name +" on the right hand side");                        counter.prompt.text =  "moving page "+ p.name+" to lefthand side";           var newPage =  doc.pages.add(LocationOptions.BEFORE , p);           newPage.label = "stopper";            i = 0; // do this until we dont have any of these pages on the right side        }        }    } //close i loopfor(var j = 0; j < doc.pages.length;j++){    var cp  = doc.pages.item(j);     if((cp.label.match("stopper"))){        $.writeln("stopper page named: " + cp.name);                if(doc.pages.item(j+1).textFrames.length > 0){            var ntf = doc.pages.item(j+1).textFrames[0];        ntf.move(cp);        ntf.geometricBounds = getBounds (doc, cp);         }        }}}/** * This is dumb run pages. (takes care of the overflow) */// by Dave Saundersfunction DumbRunPages(theDoc, theStory,id) {  	// What makes this "dumb" is that default master pages are used.  	var uRuler = theDoc.viewPreferences.rulerOrigin;  	theDoc.viewPreferences.rulerOrigin = RulerOrigin.spreadOrigin;	while (theStory.textContainers[theStory.textContainers.length-1].overflows) {  		/* 		// Original: Seite nach der letzten Dokumentseite einfügen 		theDoc.documentPreferences.pagesPerDocument = theDoc.documentPreferences.pagesPerDocument + 1;  		var backPage = theDoc.pages[-1]; 		*/ 		 		//alternativ: Seite nach der letzten Textrahmenseite einfügen 		var backPage = theDoc.pages.add();        backPage.appliedMaster = theDoc.masterSpreads.item("id-"+String(id));		counter.prompt.text =  "still overflows. added page: " + backPage.name;		app.activeWindow.activePage = backPage;  //~ 		backPage.appliedMaster = theDoc.pages[-2].appliedMaster;  		var myPbounds = backPage.bounds;  		var myNewTF = backPage.textFrames.add();  		if ((backPage.name % 2 == 1) || (!theDoc.documentPreferences.facingPages)) {  			myNewTF.geometricBounds =   			[myPbounds[0] + backPage.marginPreferences.top,   			myPbounds[1] + backPage.marginPreferences.left,   			myPbounds[2] - backPage.marginPreferences.bottom,   			myPbounds[3] - backPage.marginPreferences.right];  		} else {  			myNewTF.geometricBounds =   			[myPbounds[0] + backPage.marginPreferences.top,   			myPbounds[1] + backPage.marginPreferences.right,   			myPbounds[2] - backPage.marginPreferences.bottom,   			myPbounds[3] - backPage.marginPreferences.left];  		}  		myNewTF.itemLayer = theStory.textContainers[theStory.textContainers.length-1].itemLayer;  		myNewTF.previousTextFrame = theStory.textContainers[theStory.textContainers.length-1];          		if (myNewTF.characters.length == 0){  			theDoc.viewPreferences.rulerOrigin = uRuler;  			alert("Permanently overset"); // This indicates a permanent overset condition so break out of loop              break;        }  	}  	theDoc.viewPreferences.rulerOrigin = uRuler;  } /** * This is for giving an id and returning a project */function get_project_by_id(id){    var result;    for(var i in meta.db.projects){           if(id == meta.db.projects[i].id){                    result = meta.db.projects[i];        break;            }                }    return result;    }    // get all the file  objects with their infos    // by their id    // returns sometihing like this//~     {"filename": "image.jpg",//~ 	"date":[ISO DATE],//~     "id":0,//~     "text":"some text or nothing",//~     "type":"project", // could also be year or link or pdf...//~     "tint":true,//~     "preview":"http://incom.org/projekt/0"});	//~ 			  }    function get_files_from_project_byID(id){            var result;        for(var i in meta.sortedFilesbyId){                if(id == meta.sortedFilesbyId[i].id){                    result = meta.sortedFilesbyId[i].files;        break;            }        }        return result;    }/** * This adds text to the temp frame and foramts him with char styles */function text_add_and_format(tf,content,car,type ,pr, id,postID){				var tempTF = tf.parentPage.textFrames.add({geometricBounds:[				meta.ph - 100, meta.left, meta.ph, meta.left+100]});			  	// from here on it is some kind of "manual" selection	//what to edit and highlite in the text			  	if(util_checkhighlite (id) == true){	//	// this is project White Noise	//var res = "";	if(postID == 17135 && type.match("post text")){	var txt = content;		res = text_tweakNoiseText(txt);		tempTF.contents = text_insertWithNL(res,type);		tempTF.paragraphs.everyItem().applyCharacterStyle(		app.activeDocument.characterStyles.item("whitenoise 1173"));				}else{				  				  		res = content;		tempTF.contents =   text_insertWithNL(res,type);		try{			tempTF.paragraphs.everyItem().applyCharacterStyle(			tempTF.parent.parent.characterStyles.item(car + " "+ id)			);            		}catch(e){alert(car + "\n" + e );}                tempTF.paragraphs.everyItem().leading = 12;    	}// close else		tempTF.paragraphs.everyItem().fillTint = 100;	}else{		//		// this is all the other projects//~         if(type.match("post text") || type.match("text")){//~ 		tempTF.contents = content;//text_insertWithNL(content,type);//~         }else{		tempTF.contents = content;//text_insertWithNL(content,type);            //~             }		            tempTF.paragraphs.everyItem().applyCharacterStyle(			app.activeDocument.characterStyles.item(car + " " +  id));        tempTF.paragraphs.everyItem().leading = 12;    		if(type.match("legend")){			tempTF.paragraphs.everyItem().fillTint = 100;	  		}	}     tempTF.paragraphs.everyItem().alignToBaseline = true;    	tempTF.previousTextFrame = tf;	tempTF.remove();}function tweak_textStyles(doc){        var idcharstyle = doc.characterStyles.item("id 0");     idcharstyle.pointSize = 7;        }function text_tweakNoiseText(txt){var noiseTXT = new Array();var noiseVals = new Array();		noiseTXT = txt.split(",");	for(var n = 0; n < noiseTXT.length;n++){		var t = parseFloat(noiseTXT[n]);		noiseVals[n] = t.toFixed(10);		}	noiseVals.shift();		var str = "";	for(s = 0; s < noiseVals.length;s++){		if(noiseVals[s] >= 0 ){			str = str + "+" + noiseVals[s] + " \t ";		}else{			str = str  + noiseVals[s] + " \t ";		}	}return str;}function text_FormatParagraphs(doc){    var fTPref  = app.findTextPreferences;var cTPref = app.changeTextPreferences;		text_emptyFC();	// now loop thru the object to get all the greps	for(var j = 0;j < meta.db.projects.length;j++){        fTPref.appliedCharacterStyle = "h1 "+meta.db.projects[j].id;        cTPref.leading = 15;        if(util_checkhighlite (meta.db.projects[j].id)){        var res = doc.changeText();        }//~         alert(res);        text_emptyFC();	}	text_emptyFC();       	// now loop thru the object to get all the greps	for(var i = 0;i < meta.db.projects.length;i++){        fTPref.appliedCharacterStyle = "h2 "+meta.db.projects[i].id;        cTPref.leading = 15;                if(util_checkhighlite (meta.db.projects[i].id)){        var res = doc.changeText();        }//~         alert(res);        text_emptyFC();	}    	// now loop thru the object to get all the greps	for(var i = 0;i < meta.db.projects.length;i++){        fTPref.appliedCharacterStyle = "id "+meta.db.projects[i].id;        cTPref.leading = 12;                if(!util_checkhighlite (meta.db.projects[i].id)){        var res = doc.changeText();        }//~         alert(res);        text_emptyFC();	}         }function text_fix_last_line(doc){        for(var j = 0; j < doc.textFrames.length;j++){        tf = doc.textFrames.item(j);        for (var i  = 0; i < tf.paragraphs.length;i++){            if(tf.paragraphs.item(i).fillTint  == 100 && tf.paragraphs.item(i).characters.item(0).appliedCharacterStyle.name.match("body")){//~                     alert("found a fill");            tf.paragraphs.item(i).leading = 12;                    }                        }    }}function text_insertWithNL(txt,type){var lf = "<LF>";// we add this to the highlite projects to add a new line		if(type.match("legend") || type.match("id")){		return  txt;		}else{	return lf + txt;	};}function text_takeOutTheTrash(doc){var findGrepPref  = app.findGrepPreferences;var chngGrepPref = app.changeGrepPreferences;var findTextPref  = app.findTextPreferences;var chngTextPref = app.changeTextPreferences;	text_set_FindChange_opt();	text_emptyFC();		// this is housekeepingvar strings = new Array();	strings[0] = "</span>";	strings[1] = "<span>";	strings[2] = "<ol>";	strings[3] = "</ol>";	strings[4] = "<li>";	strings[5] = "</li>";	strings[6] = "\t";	strings[7] = "<cite>";	strings[8] = "</cite>";	strings[9] = "</ul>";	strings[10] = "<ul>";	strings[11] = "<..>";	strings[12] = "<...>";	strings[13] = "<.>";	strings[14] = "</p>";	strings[15] = "<p>";	strings[16] = "<p >";	strings[17] = "</p >";	strings[18] = "style=“color: #000000;“";	strings[19]  = "style=“text-decoration: underline;“";	strings[20]  = "style=“text-decoration: underline;“";	strings[21]  = "style=“text-align: left;“";	strings[22]  = "style=“text-align: right;“";	strings[23]  = "style=“text-align: center;“";	strings[24]  = "</span >";	strings[25]  = "<span >";	strings[26]  = "style=“color: #";	strings[27]  = "span ";	strings[28]  = ";“";		strings.push("<br />");	strings.push("<h1>");	strings.push("<h2>");	strings.push("<h3>");		strings.push("</h3>");	strings.push("</h1>");	strings.push("</h2>");	strings.push("<hr />");	strings.push("</em>");	strings.push("<em>");	strings.push("<strong>");	strings.push("</strong>");	for(var i = 0;i < strings.length;i++){		text_set_FindChange_opt();		findTextPref.findWhat = strings[i];		chngTextPref.changeTo = "";		doc.changeText();		text_emptyFC();	}	text_emptyFC();		// replace some html encoded characters	var replaceS = new Array();	replaceS.push({"fw":";amp","to":"&"});	replaceS.push({"fw":"amp;","to":"&"});//~ var replaceT = new Array();//~	 replaceT.push("&");//~	 replaceT.push("&");		for(var j = 0;j < replaceS.length;j++){		text_set_FindChange_opt();		findTextPref.findWhat = replaceS[j].fw;		chngTextPref.changeTo = replaceS[j].to;		doc.changeText();		text_emptyFC();	}}function text_grepReformatting(doc){	var fGPref  = app.findGrepPreferences;var cGPref = app.changeGrepPreferences;var greps_ = new Array();	// use json objects to keep it tidy	// fw is the find what	// to is the change to	greps_.push({   "fw":"  +"	  ,		"to":" "});	greps_.push({   "fw":"\r "	  ,		"to":"\r"});	greps_.push({   "fw":" \r"	  ,		"to":"\r"});	greps_.push({   "fw":"\t\t+"	,	  "to":"\t"});	greps_.push({   "fw":"\r\t"	 ,	   "to":"\r"});	greps_.push({   "fw":"\t\r"	 ,	   "to":"\r"});	greps_.push({   "fw":"\r\r+"	,	  "to":" ~7 "});	greps_.push({   "fw":"\r"	   ,		 "to":" ~7 "});	greps_.push({   "fw":"\n"	   ,		 "to":" ~7 "});	greps_.push({   "fw":"~b"	   ,		 "to":" ~7 "});	greps_.push({   "fw":"~7 ~7"	,	  "to":" ~7 "});	greps_.push({   "fw":" ~7  ~7 " ,   "to":" ~7 "});	greps_.push({   "fw":"<LF>"	 ,	   "to":"\r"});// this is my personal linefeed	greps_.push({   "fw":"<a\ href\=\"(.*?)\">"	 ,	   "to":" $1 "});// find link    greps_.push({   "fw":"alt\=\".*?\""	 ,	   "to":" "});// fand alternate       greps_.push({   "fw":"<img src\=\"(.*?)\"\ {0,3}/>"	 ,	   "to":" $1 "});// find img as html	greps_.push({   "fw":"</a>"	 ,	   "to":" "});// find end of href tag	greps_.push({   "fw":"\&hellip;"	 ,	   "to":"&"});// find & in html	greps_.push({   "fw":"\&quot;"	 ,	   "to":"\""});// find quotew in html    greps_.push({   "fw":"~7\ \ {2,3}"	 ,	   "to":""});// also to many    greps_.push({   "fw":"\ ~7\ \ ~7\ "	 ,	   "to":"\ ~7\ "});//to many paragraph signs    greps_.push({   "fw":"\ \ "	 ,	   "to":"\ "});// double spaces    greps_.push({   "fw":"\ ~7\ $"	 ,	   "to":""});// absatzmarke am ende eines textes    greps_.push({   "fw":"\ ~7$"	 ,	   "to":""});// absatzmarke am ende eines textes	text_emptyFC();	// now loop thru the object to get all the greps	for(var j = 0;j < greps_.length;j++){		fGPref.findWhat = greps_[j].fw;		cGPref.changeTo = greps_[j].to;		doc.changeGrep();		text_emptyFC();	}	text_emptyFC();}/** * this function takes out html trash  * */function text_set_FindChange_opt(){		text_emptyFC();	//Set the find options.	app.findChangeGrepOptions.includeFootnotes = true;	app.findChangeGrepOptions.includeHiddenLayers = false;	app.findChangeGrepOptions.includeLockedLayersForFind = false;	app.findChangeGrepOptions.includeLockedStoriesForFind = true;	app.findChangeGrepOptions.includeMasterPages = true;	}function text_emptyFC(){	//Clear the find/change grep preferences.	app.findGrepPreferences = NothingEnum.nothing;	app.changeGrepPreferences = NothingEnum.nothing;		//Clear the find/change text preferences.	app.findTextPreferences = NothingEnum.nothing;	app.changeTextPreferences = NothingEnum.nothing;}function text_find_HTML_tags(doc) {	text_set_FindChange_opt();//~ var findGrepPref  = app.findGrepPreferences;//~ var chngGrepPref = app.changeGrepPreferences;//~ 	var findTXTPref  = app.findTextPreferences;var chngTXTPref = app.changeTextPreferences;		text_emptyFC();	var easyTagToPS = new Array();	easyTagToPS[0] = "h1";	easyTagToPS[1] = "h2";//~ 	easyTagToPS[2] = "h3";//~ 	easyTagToPS[3] = "h4";//~ 	easyTagToPS[4] = "h5";//~ 	easyTagToPS[5] = "h6";	for(var i = 0; i < easyTagToPS.length; i++){			findGrepPref.findWhat = "<"+ easyTagToPS[i] + ">(.*?)</" + easyTagToPS[i] + ">";				var res = doc.findText();		res.appliedParagraphStyle = easyTagToPS[i];		chngGrepPref.changeTo = "$1\r";//~		 chngGrepPref.appliedParagraphStyle = easyTagToPS[i];//~ 		chngGrepPref.appliedCharacterStyle = doc.characterStyles.item(0);		doc.changeGrep();		text_emptyFC();	}}function getAdditionalFilesFolder(){		// define the folder and the filetype          var theFolder = Folder("~/Documents/Dropbox/kolloqiuum");//Folder.selectDialog ("Choose the FOLDER to import the images from");      //~	 alert(theFolder);	// if the user cancels the folder dialog	 // cancel the script	if(!theFolder){		return;// this cancels the whole function main \(\)		}	var theFileType = "*.*";// could also be "*.jpg" JPG only	// get all images into an array	var temp = null;	    try{	temp = theFolder.getFiles(theFileType);	   	   }catch(e){		   if(meta.DEBUG)alert("Error with this\n" +e);		   }// end catch      var allImages = temp;	if((allImages == "")||(allImages == null) ){		if(meta.DEBUG)alert("There are no images");		return;	   	   }   	meta.addFlsFolder = theFolder;// to get them all everywhere    	}// the good old get bounds// its an adobe thingyfunction getBounds(doc, page){	var pw = doc.documentPreferences.pageWidth;	var ph = doc.documentPreferences.pageHeight	if(page.side == PageSideOptions.leftHand){		var myX2 = page.marginPreferences.left;		var myX1 = page.marginPreferences.right;	}	else{		var myX1 = page.marginPreferences.left;		var myX2 = page.marginPreferences.right;	}	var myY1 = page.marginPreferences.top;	var myX2 = pw - myX2;	var myY2 = ph - page.marginPreferences.bottom;	return [myY1, myX1, myY2, myX2];}function build_cover(){        var cover = app.documents.add();    var cp = cover.pages.item(0);    	// set some parameterscover.viewPreferences.properties = {	horizontalMeasurementUnits: MeasurementUnits.MILLIMETERS,	verticalMeasurementUnits:MeasurementUnits.MILLIMETERS,    rulerOrigin : RulerOrigin.pageOrigin	};	cover.documentPreferences.properties = {		pageWidth : (meta.pw*2)+meta.bookback,		pageHeight : meta.ph,        documentBleedBottomOffset : 3,        documentBleedTopOffset : 3,        documentBleedInsideOrLeftOffset : 3,        documentBleedOutsideOrRightOffset : 3	};    var	spread = cover.masterSpreads.item(0);var	mpref = spread.pages.item(1).marginPreferences;    mpref.properties  = {            top : meta.top,            left : meta.left,            right : meta.right,            bottom : meta.bottom,        	columnCount : 2,            columnGutter : meta.bookback                };    cp.appliedMaster = spread;    // now place the titel images.//~ var images = cover_place_images(cover,cp);var p_m_pref = cp.marginPreferences;var y1 = meta.top;var x1 = p_m_pref.columnsPositions[2] + meta.left;var y2 = meta.ph - meta.bottom;var x2 = ((meta.pw*2) + meta.bookback) - meta.left;var tbnds = [y1,x1,y2,x2];var titelimg = cp.rectangles.add({geometricBounds : tbnds});    titelimg.place(meta.addFlsFolder.fsName + "/" + "titel.jpg");    titelimg.strokeWeight = 0;    titelimg.fit(FitOptions.PROPORTIONALLY);    titelimg.fit(FitOptions.CENTER_CONTENT);//~     cover.align(titelimg.images.item(0),   AlignOptions.TOP_EDGES, AlignDistributeBounds.MARGIN_BOUNDS);     titelimg.fit(FitOptions.FRAME_TO_CONTENT);    //~     paragraphsToFrames (cp, ["Dokumentation des Hauptstudiums von","Fabian Morón Zirfas"]);    y1 = meta.top;    x1 =  meta.left;    y2 = meta.left + p_m_pref.columnsPositions[1];    x2 = meta.left + p_m_pref.columnsPositions[1];    var obnds = titelimg.geometricBounds;       var oval = cp.ovals.add({geometricBounds : obnds});var tp = oval.textPaths.add();    oval.strokeWeight = 0;    tp.contents = "Dokumentation des Hauptstudiums von Fabian Morón Zirfas";    var ilpar = tp.paragraphs.item(0);        ilpar.hyphenation = false;//~         ilpar.justification = Justification.LEFT_ALIGN;         ilpar.appliedFont = "DejaVu Serif	Bold";                    var ptsz = 10;        while(!tp.overflows){                    ilpar.pointSize = ptsz;                tp.textAlignment = TextTypeAlignments.ASCENDER_TEXT_ALIGNMENT;            ptsz++;            }            while(tp.overflows){             ptsz--;        tp.textAlignment = TextTypeAlignments.ASCENDER_TEXT_ALIGNMENT;            ilpar.pointSize = ptsz;            }        ilpar.fillColor = cover.swatches.item(2);        ilpar.strokeColor = cover.swatches.item(3);        //~         ilpar.fillTint = 42;        }